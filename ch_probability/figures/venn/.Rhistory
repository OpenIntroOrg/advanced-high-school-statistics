# must generalize for more than 4 branches (6, 8, etc.)#
tree.diag <- function(var1, var2, p1=c(), p2=list(), resp1=c('yes','no'), resp2=c('yes','no'), header.size=1.5,space.left=0, space.right=0, final.prob.sub=list(NA), digits=4){#
#
n1 <- length(p1)#
n2 <- length(p2[[1]])#
if(sum(p1) != 1) warning('marginal probabilities do not sum to 1')#
if(n1 != length(resp1)) stop('the number of responses for the first variable is not equal to the number of probabilities')#
for(i in 1:n1){#
if(sum(p2[[i]]) != 1) warning(paste('marginal probabilities for p2, position',i,'do not sum to 1'))#
if(length(p2[[i]]) != n2) stop(paste('the number of responses for the second variable does not equal the number of probabilities in position',i))#
}#
#
bounds <- c(-.9,.6)#
ctr <- mean(bounds)#
par(mar=rep(0,4))#
plot(1,1,type='n', axes=F, ylim=c(-1,1),#
xlim=c(-space.left,1+space.right*.62), xlab='', ylab='')#
#
pos2 <- seq(bounds[1],bounds[2],length.out=n1*n2)#
pos2 <- matrix(pos2, n1,n2,byrow=T)#
pos1 <- vector()#
for(i in 1:n1)   pos1[i] <- mean(pos2[i,])#
#
for(i in 1:n1){#
points(c(0,.3),c(ctr,pos1[i]),type='l')#
for(j in 1:n2)	points(c(.3,.7),c(pos1[i],pos2[i,j]),type='l')#
}#
#
#===> headers <===##
text(.12,.8,var1,cex=header.size)#
text(.46,.9,var2,cex=header.size)#
#
#===> names and probabilities <===##
if(as.integer(n1) - n1 == 0)#
temp <- (n1 + 1)/2#
x <- c(0,.3)#
mult <- 0.06 - 0.025*n1*n2/9#
if(n1 == 3 & n2 == 3) mult <- 0.035#
for(i in 1:n1){#
y <- c(ctr,pos1[n1-i+1])#
text(c(.09,.21), ((2:1)*y[1] + (1:2)*y[2])/3 + 0.05*sign(y[2]-y[1]+0.001)*c(1,-1), c(resp1[i],as.character(p1[i])))#
temp <- 0#
for(j in 1:n2){#
y1 <- c(y[2],pos2[n1-i+1,n2-j+1])#
text(c(.44,.58)+temp, ((2:1)*y1[1] + (1:2)*y1[2])/3 + mult*sign(y1[2]-y1[1]+0.001)*c(1,-1), c(resp2[j],as.character(p2[[i]][j])))#
if(n2 > 2)   temp <- temp + .03#
if(temp > .03)   temp <- 0#
final.prob <- paste(p1[i],'*',p2[[i]][j],' = ',round(p1[i]*p2[[i]][j], digits),sep='')#
if(!is.na(final.prob.sub[[1]][1])) final.prob <- final.prob.sub[[i]][j]#
text(.7,y1[2],final.prob,pos=4)#
}#
}#
}#
tree.diag('flight on time?','luggage on time?',c(.8,.2),list(c(.97,.03),c(.15,.85)))#
tree.diag('breakfast?','go to class',c(.4,.6),list(c(.4,.36,.34),c(.6,.3,.1)),c('y','n'),c('stat','Eng','soc'))#
tree.diag('breakfast?','go to class',c(.4,.11,.49),list(c(.4,.36,.24),c(.6,.3,.1),c(.1,.4,.5)),c('one','two','three'),c('stat','Eng','soc'))
#
#
# load tree.diag first#
tree.diag('Midterm','Final',c(0.13,0.87),#
list(c(0.47,0.53),c(0.11,0.89)),#
c('A','other'),c('A','other'))
#
# must generalize for more than 4 branches (6, 8, etc.)#
tree.diag <- function(var1, var2, p1=c(), p2=list(), resp1=c('yes','no'), resp2=c('yes','no'), header.size=1.5,space.left=0, space.right=0, final.prob.sub=list(NA), digits=4){#
#
n1 <- length(p1)#
n2 <- length(p2[[1]])#
if(sum(p1) != 1) warning('marginal probabilities do not sum to 1')#
if(n1 != length(resp1)) stop('the number of responses for the first variable is not equal to the number of probabilities')#
for(i in 1:n1){#
if(sum(p2[[i]]) != 1) warning(paste('marginal probabilities for p2, position',i,'do not sum to 1'))#
if(length(p2[[i]]) != n2) stop(paste('the number of responses for the second variable does not equal the number of probabilities in position',i))#
}#
#
bounds <- c(-.9,.6)#
ctr <- mean(bounds)#
par(mar=rep(0,4))#
plot(1,1,type='n', axes=F, ylim=c(-1,1),#
xlim=c(-space.left,1+space.right*.62), xlab='', ylab='')#
#
pos2 <- seq(bounds[1],bounds[2],length.out=n1*n2)#
pos2 <- matrix(pos2, n1,n2,byrow=T)#
pos1 <- vector()#
for(i in 1:n1)   pos1[i] <- mean(pos2[i,])#
#
for(i in 1:n1){#
points(c(0,.3),c(ctr,pos1[i]),type='l')#
for(j in 1:n2)	points(c(.3,.7),c(pos1[i],pos2[i,j]),type='l')#
}#
#
#===> headers <===##
text(.12,.8,var1,cex=header.size)#
text(.46,.9,var2,cex=header.size)#
#
#===> names and probabilities <===##
if(as.integer(n1) - n1 == 0)#
temp <- (n1 + 1)/2#
x <- c(0,.3)#
mult <- 0.06 - 0.025*n1*n2/9#
if(n1 == 3 & n2 == 3) mult <- 0.035#
for(i in 1:n1){#
y <- c(ctr,pos1[n1-i+1])#
text(c(.09,.21), ((2:1)*y[1] + (1:2)*y[2])/3 + 0.05*sign(y[2]-y[1]+0.001)*c(1,-1), c(resp1[i],as.character(p1[i])))#
temp <- 0#
for(j in 1:n2){#
y1 <- c(y[2],pos2[n1-i+1,n2-j+1])#
text(c(.44,.58)+temp, ((2:1)*y1[1] + (1:2)*y1[2])/3 + mult*sign(y1[2]-y1[1]+0.001)*c(1,-1), c(resp2[j],as.character(p2[[i]][j])))#
if(n2 > 2)   temp <- temp + .03#
if(temp > .03)   temp <- 0#
final.prob <- paste(p1[i],'*',p2[[i]][j],' = ',round(p1[i]*p2[[i]][j], digits),sep='')#
if(!is.na(final.prob.sub[[1]][1])) final.prob <- final.prob.sub[[i]][j]#
text(.7,y1[2],final.prob,pos=4)#
}#
}#
}#
tree.diag('flight on time?','luggage on time?',c(.8,.2),list(c(.97,.03),c(.15,.85)))#
tree.diag('breakfast?','go to class',c(.4,.6),list(c(.4,.36,.34),c(.6,.3,.1)),c('y','n'),c('stat','Eng','soc'))#
tree.diag('breakfast?','go to class',c(.4,.11,.49),list(c(.4,.36,.24),c(.6,.3,.1),c(.1,.4,.5)),c('one','two','three'),c('stat','Eng','soc'))#
#
#
# load tree.diag first#
pdf('testTree.pdf', 5, 3)#
tree.diag('Midterm','Final',c(0.13,0.87),#
list(c(0.47,0.53),c(0.11,0.89)),#
c('A','other'),c('A','other'))#
dev.off()
#
# must generalize for more than 4 branches (6, 8, etc.)#
tree.diag <- function(var1, var2, p1=c(), p2=list(), resp1=c('yes','no'), resp2=c('yes','no'), header.size=1.5,space.left=0, space.right=0, final.prob.sub=list(NA), digits=4){#
#
n1 <- length(p1)#
n2 <- length(p2[[1]])#
if(sum(p1) != 1) warning('marginal probabilities do not sum to 1')#
if(n1 != length(resp1)) stop('the number of responses for the first variable is not equal to the number of probabilities')#
for(i in 1:n1){#
if(sum(p2[[i]]) != 1) warning(paste('marginal probabilities for p2, position',i,'do not sum to 1'))#
if(length(p2[[i]]) != n2) stop(paste('the number of responses for the second variable does not equal the number of probabilities in position',i))#
}#
#
bounds <- c(-.9,.6)#
ctr <- mean(bounds)#
par(mar=rep(0,4))#
plot(1,1,type='n', axes=F, ylim=c(-1,1),#
xlim=c(-space.left,1+space.right*.62), xlab='', ylab='')#
#
pos2 <- seq(bounds[1],bounds[2],length.out=n1*n2)#
pos2 <- matrix(pos2, n1,n2,byrow=T)#
pos1 <- vector()#
for(i in 1:n1)   pos1[i] <- mean(pos2[i,])#
#
for(i in 1:n1){#
points(c(0,.3),c(ctr,pos1[i]),type='l')#
for(j in 1:n2)	points(c(.3,.7),c(pos1[i],pos2[i,j]),type='l')#
}#
#
#===> headers <===##
text(.12,.8,var1,cex=header.size)#
text(.46,.9,var2,cex=header.size)#
#
#===> names and probabilities <===##
if(as.integer(n1) - n1 == 0)#
temp <- (n1 + 1)/2#
x <- c(0,.3)#
mult <- 0.06 - 0.025*n1*n2/9#
if(n1 == 3 & n2 == 3) mult <- 0.035#
for(i in 1:n1){#
y <- c(ctr,pos1[n1-i+1])#
text(c(.09,.21), ((2:1)*y[1] + (1:2)*y[2])/3 + 0.05*sign(y[2]-y[1]+0.001)*c(1,-1), c(resp1[i],as.character(p1[i])))#
temp <- 0#
for(j in 1:n2){#
y1 <- c(y[2],pos2[n1-i+1,n2-j+1])#
text(c(.44,.58)+temp, ((2:1)*y1[1] + (1:2)*y1[2])/3 + mult*sign(y1[2]-y1[1]+0.001)*c(1,-1), c(resp2[j],as.character(p2[[i]][j])))#
if(n2 > 2)   temp <- temp + .03#
if(temp > .03)   temp <- 0#
final.prob <- paste(p1[i],'*',p2[[i]][j],' = ',round(p1[i]*p2[[i]][j], digits),sep='')#
if(!is.na(final.prob.sub[[1]][1])) final.prob <- final.prob.sub[[i]][j]#
text(.7,y1[2],final.prob,pos=4)#
}#
}#
}# load tree.diag first#
pdf('testTree.pdf', 5, 3)#
tree.diag('Midterm','Final',c(0.13,0.87),#
list(c(0.47,0.53),c(0.11,0.89)),#
c('A','other'),c('A','other'))#
dev.off()
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
for(j in 1:(length(BR[[i]])-1)){#
these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
if(any(these)){#
COUNTS[[i]][j] <- sum(counts[these])#
}#
}#
}#
#
histTemp <- function(BR, COUNTS, col='#22558840', border='#225588', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
br <- BR#
h  <- COUNTS#
if(probability){#
h <- h/sum(h)/diff(br)#
}#
if(is.null(ylab)){#
ylab <- 'frequency'#
if(probability){#
ylab <- 'probability'#
}#
}#
if(is.null(xlim)[1]){#
xR <- range(br)#
xlim <- xR + c(-0.05, 0.05)*diff(xR)#
}#
if(is.null(ylim)[1]){#
ylim <- range(c(0,h))#
}#
#	cat()#
plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
abline(h=0)#
lines(c(br[1],br[1]), c(0,h[1]), col=border)#
for(i in 1:length(h)){#
if(i > 1){#
if(h[i] > h[i-1]){#
lines(rep(br[i],2), h[c(i-1,i)], col=border)#
}#
}#
lines(br[i+0:1], rep(h[i],2), col=border)#
lines(rep(br[i+1],2), c(0,h[i]), col=border)#
rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
}#
}#
#
#
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588BB', border='#22558800')#
rect(BR[[2]][28], 0, BR[[2]][29], COUNTS[[2]][28], col='#225588BB', border='#22558800')
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
#MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
for(j in 1:(length(BR[[i]])-1)){#
these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
if(any(these)){#
COUNTS[[i]][j] <- sum(counts[these])#
}#
}#
}#
#
histTemp <- function(BR, COUNTS, col='#22558840', border='#225588', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
br <- BR#
h  <- COUNTS#
if(probability){#
h <- h/sum(h)/diff(br)#
}#
if(is.null(ylab)){#
ylab <- 'frequency'#
if(probability){#
ylab <- 'probability'#
}#
}#
if(is.null(xlim)[1]){#
xR <- range(br)#
xlim <- xR + c(-0.05, 0.05)*diff(xR)#
}#
if(is.null(ylim)[1]){#
ylim <- range(c(0,h))#
}#
#	cat()#
plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
abline(h=0)#
lines(c(br[1],br[1]), c(0,h[1]), col=border)#
for(i in 1:length(h)){#
if(i > 1){#
if(h[i] > h[i-1]){#
lines(rep(br[i],2), h[c(i-1,i)], col=border)#
}#
}#
lines(br[i+0:1], rep(h[i],2), col=border)#
lines(rep(br[i+1],2), c(0,h[i]), col=border)#
rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
}#
}
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
axis(1)
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588BB', border='#22558800')
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=FALSE)#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588BB', border='#22558800')#
rect(BR[[2]][28], 0, BR[[2]][29], COUNTS[[2]][28], col='#225588BB', border='#22558800')
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=FALSE)#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588BB', border='#22558800')#
rect(BR[[2]][28], 0, BR[[2]][29], COUNTS[[2]][28], col='#225588BB', border='#22558800')
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
#MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
for(j in 1:(length(BR[[i]])-1)){#
these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
if(any(these)){#
COUNTS[[i]][j] <- sum(counts[these])#
}#
}#
}#
#
histTemp <- function(BR, COUNTS, col='#22558840', border='#225588', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
br <- BR#
h  <- COUNTS#
if(probability){#
h <- h/sum(h)/diff(br)#
}#
if(is.null(ylab)){#
ylab <- 'frequency'#
if(probability){#
ylab <- 'probability'#
}#
}#
if(is.null(xlim)[1]){#
xR <- range(br)#
xlim <- xR + c(-0.05, 0.05)*diff(xR)#
}#
if(is.null(ylim)[1]){#
ylim <- range(c(0,h))#
}#
#	cat()#
plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
abline(h=0)#
lines(c(br[1],br[1]), c(0,h[1]), col=border)#
for(i in 1:length(h)){#
if(i > 1){#
if(h[i] > h[i-1]){#
lines(rep(br[i],2), h[c(i-1,i)], col=border)#
}#
}#
lines(br[i+0:1], rep(h[i],2), col=border)#
lines(rep(br[i+1],2), c(0,h[i]), col=border)#
rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
}#
}#
#
#
pdf('usHeightsHist180185.pdf', 6, 2.75)#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=FALSE)#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588BB', border='#22558800')#
rect(BR[[2]][28], 0, BR[[2]][29], COUNTS[[2]][28], col='#225588BB', border='#22558800')#
dev.off()
#
p <- c(0.28, 0.27, 0.29, 0.16)#
names(p) <- c('0-25', '25-50', '50-100', '100+')#
par(mar=c(4.3, 5.2, 1,1), mgp=c(2.4, 0.7, 0), las=1)#
barplot(p, xlab='US household incomes ($1000s)')#
par(las=0)#
mtext('probability', side=2, line=3.7)#
abline(h=0)
pdf('usHousholdIncomeDistBar.pdf', 5, 3)#
p <- c(0.28, 0.27, 0.29, 0.16)#
names(p) <- c('0-25', '25-50', '50-100', '100+')#
par(mar=c(4.3, 5.2, 1,1), mgp=c(2.4, 0.7, 0), las=1)#
barplot(p, xlab='US household incomes ($1000s)')#
par(las=0)#
mtext('probability', side=2, line=3.7)#
abline(h=0)#
dev.off()
pdf('usHousholdIncomeDistBar.pdf', 5.5, 3.1)#
p <- c(0.28, 0.27, 0.29, 0.16)#
names(p) <- c('0-25', '25-50', '50-100', '100+')#
par(mar=c(4.3, 5.2, 1,1), mgp=c(2.4, 0.7, 0), las=1)#
barplot(p, xlab='US household incomes ($1000s)')#
par(las=0)#
mtext('probability', side=2, line=3.7)#
abline(h=0)#
dev.off()
#
pdf('venn.pdf', 3, 1.7)#
par(mar=c(0,0,0,0))#
plot(c(0.2,1.8), c(0,1), type='n')#
#
z <- seq(0,2*pi, len=99)#
x1 <- cos(z)/2+0.7#
y1 <- sin(z)/3+0.5#
lines(c(x1, x1[1]),c(y1, y1[1]))#
#
x2 <- cos(z)/2+1.3#
y2 <- sin(z)/3+0.5#
lines(c(x2, x2[1]),c(y2, y2[1]))#
#
text(0.7, 0.9, 'Diamonds')#
text(1.3, 0.9, 'Face cards')#
text(c(0.55, 1, 1.45), rep(0.57, 3), c(10, 3, 9), cex=1.3)#
text(c(0.55, 1, 1.45), rep(0.41, 3), c('10/52', '3/52', '9/52'),#
cex=1, col='#888888'); text(1.4, 0.07, 'Other cards: 30')#
dev.off()
#
pdf('venn.pdf', 2.95, 1.65)#
par(mar=c(0,0,0,0))#
plot(c(0.2,1.8), c(0,1), type='n')#
#
z <- seq(0,2*pi, len=99)#
x1 <- cos(z)/2+0.7#
y1 <- sin(z)/3+0.5#
lines(c(x1, x1[1]),c(y1, y1[1]))#
#
x2 <- cos(z)/2+1.3#
y2 <- sin(z)/3+0.5#
lines(c(x2, x2[1]),c(y2, y2[1]))#
#
text(0.7, 0.9, 'Diamonds')#
text(1.3, 0.9, 'Face cards')#
text(c(0.55, 1, 1.45), rep(0.57, 3), c(10, 3, 9), cex=1.3)#
text(c(0.55, 1, 1.45), rep(0.41, 3), c('10/52', '3/52', '9/52'),#
cex=1, col='#888888'); text(1.4, 0.07, 'Other cards: 30')#
dev.off()
sqrt(.06*.94/300)
(.06*.94/300)
library(openintro)
data(COL)
myPDF('venn.pdf', 1.2 * 4.2, 1.2 * 1.7,
mar = c(0.2, 0.2, 0.2, 0.2))
plot(c(0.2, 2.5),
c(-0.13, 1.15),
type = 'n',
axes = FALSE)
z <- seq(0,2 * pi, len = 99)
x2 <- cos(z) / 2 + 1.3
y2 <- sin(z) / 3 + 0.5
polygon(c(x2, x2[1]), c(y2, y2[1]), col = COL[3,3])
x1 <- cos(z) / 2 + 0.7
y1 <- sin(z) / 3 + 0.5
polygon(c(x1, x1[1]),c(y1, y1[1]), col = COL[1,3])
text(c(0.55, 1, 1.45),
rep(0.57, 3),
c(10, 3, 9),
cex = c(1.3, 1.2, 1.3))
text(c(0.55, 1, 1.45),
c(0.41, 0.43, 0.41),
c('0.1923', '0.0577', '0.1731'),
cex = c(1, 0.9, 1))
# text(0.5, -0.25, 'Other cards: 30', cex = 0.8)
# text(0.98, -0.26, '(0.5769)', cex = 0.8)
text(2.25, 0.55, cex = 0.8,
paste("There are also", "30 cards that are",
"neither diamonds", "nor face cards", sep = "\n"))
# text(2.25, 0.28, '(0.5769)', cex = 0.8)
Braces(0.7, 0.92, 3 * pi / 2, 0.98, 0.12)
text(0.7, 1.09, 'Diamonds, 0.2500')
Braces(1.3, 0.08, pi / 2, 0.98, 0.12)
text(1.3, -0.08, 'Face cards, 0.2308')
dev.off()
library(openintro)
data(COL)
myPDF('venn.pdf', 1.2 * 4.2, 1.2 * 1.7,
mar = c(0.2, 0.2, 0.2, 0.2))
plot(c(0.2, 2.5),
c(-0.13, 1.15),
type = 'n',
axes = FALSE)
box(which="plot")
z <- seq(0,2 * pi, len = 99)
x2 <- cos(z) / 2 + 1.3
y2 <- sin(z) / 3 + 0.5
polygon(c(x2, x2[1]), c(y2, y2[1]), col = COL[3,3])
x1 <- cos(z) / 2 + 0.7
y1 <- sin(z) / 3 + 0.5
polygon(c(x1, x1[1]),c(y1, y1[1]), col = COL[1,3])
text(c(0.55, 1, 1.45),
rep(0.57, 3),
c(10, 3, 9),
cex = c(1.3, 1.2, 1.3))
text(c(0.55, 1, 1.45),
c(0.41, 0.43, 0.41),
c('0.1923', '0.0577', '0.1731'),
cex = c(1, 0.9, 1))
# text(0.5, -0.25, 'Other cards: 30', cex = 0.8)
# text(0.98, -0.26, '(0.5769)', cex = 0.8)
text(2.25, 0.55, cex = 0.8,
paste("There are also", "30 cards that are",
"neither diamonds", "nor face cards", sep = "\n"))
# text(2.25, 0.28, '(0.5769)', cex = 0.8)
Braces(0.7, 0.92, 3 * pi / 2, 0.98, 0.12)
text(0.7, 1.09, 'Diamonds, 0.2500')
Braces(1.3, 0.08, pi / 2, 0.98, 0.12)
text(1.3, -0.08, 'Face cards, 0.2308')
dev.off()
