#
#
at <- c(0, 137, 170)#
prob <- c(0.2, .55, .25)#
#
# must load probDist#
par(las=1, mar=c(3.2,4,0.5,0.5), mgp=c(2, 0.7, 0))#
probDist(at, prob, xlab='cost (dollars)', ylab='', ylim=c(-0.05, 0.55))#
axis(2, at=seq(0,0.5, 0.1))#
lines(c(-10, 180), c(0,0))#
polygon(117.85 + c(-10, 10, 0), c(-0.08, -0.08, 0))#
par(las=0)#
mtext('probability', side=2, line=2.8)
#
probDist <- function(x, prob, labels1=NA,#
		labels2=NA, thickness=NA, col=NA, ylim=NULL, ...){#
	R <- range(x)#
	R <- R + c(-1,1)*(R[2]-R[1])/20#
	Ry <- c(0, range(prob)[2])#
	if(!is.null(ylim)[1]){#
		Ry <- ylim#
	}#
	plot(x, prob, type='n', axes=F, xlim=R, ylim=Ry, ...)#
	if(is.na(labels1)[1]) labels1 <- x#
	if(is.na(labels2)[1]) labels2 <- TRUE#
	axis(1, at=x, labels=labels1)#
	#axis(2)#
	make.bar(x, prob, thickness=thickness, col=col)#
	#abline(h=0)#
}#
#
make.bar <- function(at, height, thickness=NA, col=NA){#
	if(is.na(thickness)){#
		R <- range(at)#
		minDiff <- min(diff(at))#
		thickness <- min(c(minDiff), (R[2]-R[1])/12)#
	}#
	x1 <- at - thickness/2#
	x2 <- at + thickness/2#
	if(is.na(col))   col <- 'grey'#
	for(i in 1:length(at)){#
#		x <- c(x1[i], x1[i], x2[i], x2[i], x2[i])#
#		y <- c(0, height[i], height[i], 0, 0)#
		rect(x1[i], 0, x2[i], height[i], col=col)#
	}#
}
#
#
at <- c(0, 137, 170)#
prob <- c(0.2, .55, .25)#
#
# must load probDist#
par(las=1, mar=c(3.2,4,0.5,0.5), mgp=c(2, 0.7, 0))#
probDist(at, prob, xlab='cost (dollars)', ylab='', ylim=c(-0.05, 0.55))#
axis(2, at=seq(0,0.5, 0.1))#
lines(c(-10, 180), c(0,0))#
polygon(117.85 + c(-10, 10, 0), c(-0.08, -0.08, 0))#
par(las=0)#
mtext('probability', side=2, line=2.8)
#
probDist <- function(x, prob, labels1=NA,#
		labels2=NA, thickness=NA, col=NA, ylim=NULL, ...){#
	R <- range(x)#
	R <- R + c(-1,1)*(R[2]-R[1])/20#
	Ry <- c(0, range(prob)[2])#
	if(!is.null(ylim)[1]){#
		Ry <- ylim#
	}#
	plot(x, prob, type='n', axes=F, xlim=R, ylim=Ry, ...)#
	if(is.na(labels1)[1]) labels1 <- x#
	if(is.na(labels2)[1]) labels2 <- TRUE#
	axis(1, at=x, labels=labels1)#
	#axis(2)#
	make.bar(x, prob, thickness=thickness, col=col)#
	#abline(h=0)#
}#
#
make.bar <- function(at, height, thickness=NA, col=NA){#
	if(is.na(thickness)){#
		R <- range(at)#
		minDiff <- min(diff(at))#
		thickness <- min(c(minDiff), (R[2]-R[1])/12)#
	}#
	x1 <- at - thickness/2#
	x2 <- at + thickness/2#
	if(is.na(col))   col <- 'grey'#
	for(i in 1:length(at)){#
#		x <- c(x1[i], x1[i], x2[i], x2[i], x2[i])#
#		y <- c(0, height[i], height[i], 0, 0)#
		rect(x1[i], 0, x2[i], height[i], col=col)#
	}#
}#
#
pdf('bookCostDist.pdf', 6, 4)#
at <- c(0, 137, 170)#
prob <- c(0.2, .55, .25)#
#
# must load probDist#
par(las=1, mar=c(3.2,4,0.5,0.5), mgp=c(2, 0.7, 0))#
probDist(at, prob, xlab='cost (dollars)', ylab='', ylim=c(-0.05, 0.55))#
axis(2, at=seq(0,0.5, 0.1))#
lines(c(-10, 180), c(0,0))#
polygon(117.85 + c(-10, 10, 0), c(-0.08, -0.08, 0))#
par(las=0)#
mtext('probability', side=2, line=2.8)#
dev.off()
#
probDist <- function(x, prob, labels1=NA,#
		labels2=NA, thickness=NA, col=NA, ylim=NULL, ...){#
	R <- range(x)#
	R <- R + c(-1,1)*(R[2]-R[1])/20#
	Ry <- c(0, range(prob)[2])#
	if(!is.null(ylim)[1]){#
		Ry <- ylim#
	}#
	plot(x, prob, type='n', axes=F, xlim=R, ylim=Ry, ...)#
	if(is.na(labels1)[1]) labels1 <- x#
	if(is.na(labels2)[1]) labels2 <- TRUE#
	axis(1, at=x, labels=labels1)#
	#axis(2)#
	make.bar(x, prob, thickness=thickness, col=col)#
	#abline(h=0)#
}#
#
make.bar <- function(at, height, thickness=NA, col=NA){#
	if(is.na(thickness)){#
		R <- range(at)#
		minDiff <- min(diff(at))#
		thickness <- min(c(minDiff), (R[2]-R[1])/12)#
	}#
	x1 <- at - thickness/2#
	x2 <- at + thickness/2#
	if(is.na(col))   col <- 'grey'#
	for(i in 1:length(at)){#
#		x <- c(x1[i], x1[i], x2[i], x2[i], x2[i])#
#		y <- c(0, height[i], height[i], 0, 0)#
		rect(x1[i], 0, x2[i], height[i], col=col)#
	}#
}#
#
pdf('bookCostDist.pdf', 5, 3)#
at <- c(0, 137, 170)#
prob <- c(0.2, .55, .25)#
#
# must load probDist#
par(las=1, mar=c(3.2,4,0.5,0.5), mgp=c(2, 0.7, 0))#
probDist(at, prob, xlab='cost (dollars)', ylab='', ylim=c(-0.05, 0.55))#
axis(2, at=seq(0,0.5, 0.1))#
lines(c(-10, 180), c(0,0))#
polygon(117.85 + c(-10, 10, 0), c(-0.08, -0.08, 0))#
par(las=0)#
mtext('probability', side=2, line=2.8)#
dev.off()
#
at <- c(0,137,170)#
wt <- c(.2,.55,.25)#
#
createWtSystem <- function(at, wt, size=1, label=T){#
	R <- range(at)#
	r <- R[2]-R[1]#
	W <- range(wt)#
	M <- weighted.mean(at, wt)#
	par(mar=c(0,0,0,0)); plot(R + c(-1,1)*r/12,0:1, type='n')#
	#
	# make hanger#
	x <- c(M, M)#
	y <- c(0.7, 1.0)#
	lines(x, y)#
	#
	# make the board#
	rect(R[1],0.685,R[2],0.7)#
		#
	# add weights#
	for(i in 1:length(at))   createWt(at[i],wt[i], size)#
#
	# label#
	if(label){#
		text(at, rep(0.73, length(at)), at)#
		text(M, 0.65, M)#
	}#
}#
#
createWt <- function(at, wt, size=1){#
	# hook#
	x <- c(at,at)#
	y <- c(.64, .6925)#
	lines(x,y)#
	#
	# the weight#
	x <- x+c(-1,1)*size#
	y <- c(.64, .64-wt)#
	rect(x[1],y[1],x[2],y[2],col='#888888')#
}#
#
pdf('bookWts.pdf', 5, 3)#
createWtSystem(at, wt, 5, T)#
#
#
dev.off()
#
at <- c(0,137,170)#
wt <- c(.2,.55,.25)#
#
createWtSystem <- function(at, wt, size=1, label=T){#
	R <- range(at)#
	r <- R[2]-R[1]#
	W <- range(wt)#
	M <- weighted.mean(at, wt)#
	par(mar=c(0,0,0,0)); plot(R + c(-1,1)*r/12,0:1, type='n')#
	#
	# make hanger#
	x <- c(M, M)#
	y <- c(0.7, 1.0)#
	lines(x, y)#
	#
	# make the board#
	rect(R[1],0.685,R[2],0.7)#
		#
	# add weights#
	for(i in 1:length(at))   createWt(at[i],wt[i], size)#
#
	# label#
	if(label){#
		text(at, rep(0.73, length(at)), at)#
		text(M, 0.65, M)#
	}#
}#
#
createWt <- function(at, wt, size=1){#
	# hook#
	x <- c(at,at)#
	y <- c(.64, .6925)#
	lines(x,y)#
	#
	# the weight#
	x <- x+c(-1,1)*size#
	y <- c(.64, .64-wt)#
	rect(x[1],y[1],x[2],y[2],col='#888888')#
}#
#
pdf('bookWts.pdf', 5.7, 3)#
createWtSystem(at, wt, 5, T)#
#
#
dev.off()
#
at <- c(0,137,170)#
wt <- c(.2,.55,.25)#
#
createWtSystem <- function(at, wt, size=1, label=T){#
	R <- range(at)#
	r <- R[2]-R[1]#
	W <- range(wt)#
	M <- weighted.mean(at, wt)#
	par(mar=c(0,0,0,0)); plot(R + c(-1,1)*r/12,0:1, type='n')#
	#
	# make hanger#
	x <- c(M, M)#
	y <- c(0.7, 1.0)#
	lines(x, y)#
	#
	# make the board#
	rect(R[1],0.685,R[2],0.7)#
		#
	# add weights#
	for(i in 1:length(at))   createWt(at[i],wt[i], size)#
#
	# label#
	if(label){#
		text(at, rep(0.73, length(at)), at)#
		text(M, 0.65, M)#
	}#
}#
#
createWt <- function(at, wt, size=1){#
	# hook#
	x <- c(at,at)#
	y <- c(.64, .6925)#
	lines(x,y)#
	#
	# the weight#
	x <- x+c(-1,1)*size#
	y <- c(.64, .64-wt)#
	rect(x[1],y[1],x[2],y[2],col='#888888')#
}#
#
pdf('bookWts.pdf', 5.5, 3)#
createWtSystem(at, wt, 5, T)#
#
#
dev.off()
pdf('complementOfD.pdf', 4, 1.2)#
#
COL <- c('#663311', '#22558888', '#000000')#
par(mar=rep(0,4))#
plot(c(-0.1,1), c(0.13,0.97), type='n', axes=F)#
#
for(i in c(1,4,5,6)){#
	text(i/7, 0.5, i)#
}#
for(i in 2:3){#
	text(i/7, 0.55, i)#
}#
theta <- seq(0,2*pi,length.out=100)#
#
#===> D <===##
lines(1/7*cos(theta)+2.5/7, 1/9*sin(theta)+0.55, lty=3, col=COL[1])#
text(2.5/7, 0.75, 'D', col=COL[1])#
#
#===> D^c <===##
x <- 1/20*cos(seq(0.5, 3*pi/2, length.out=20))+1/7#
y <- 1/5*sin(seq(0.2, 3*pi/2, length.out=20))+0.5#
x <- c(x, 1/20*cos(seq(-pi/2, pi/2, length.out=20))+6/7)#
y <- c(y, 1/5*sin(seq(-pi/2, pi/2, length.out=20))+0.45)#
x <- c(x, 1/20*cos(seq(pi/2, pi, length.out=10))+4/7)#
y <- c(y, 1/5*sin(seq(pi/2, pi-0.5, length.out=10))+.45)#
x <- c(x, seq(1/2, 3/14, length.out=10))#
y <- c(y, seq(-0.35, 0.35, length.out=10)^2+0.33)#
x <- c(x, x[1])#
y <- c(y, y[1])#
lines(x, y, lty=2, col=COL[2])#
text(5/7, 0.75, expression(D^C), col=COL[2])#
#
#===> S <===##
x <- 1/10*cos(seq(pi/2, 3*pi/2, length.out=20))+1/9#
y <- 1/3*sin(seq(pi/2, 3*pi/2, length.out=20))+0.55#
x <- c(x, 1/10*cos(seq(-pi/2, pi/2, length.out=20))+8/9)#
y <- c(y, 1/3*sin(seq(-pi/2, pi/2, length.out=20))+0.55)#
#x <- c(x, 1/20*cos(seq(pi/2, pi, length.out=10))+4/7)#
#y <- c(y, 1/5*sin(seq(pi/2, pi-0.5, length.out=10))+.45)#
#x <- c(x, seq(1/2, 3/14, length.out=10))#
#y <- c(y, seq(-0.35, 0.35, length.out=10)^2+0.33)#
x <- c(x, x[1])#
y <- c(y, y[1])#
lines(x, y, lty=2, col=COL[3])#
text(0, 0.55, expression(S), col=COL[3], pos=2, cex=1.3)#
#
#
dev.off()
pdf('contBalance.pdf', 4, 2.3)#
x <- seq(0,22,0.01)#
y <- dchisq(x,5)#
M <- weighted.mean(x,y)#
#
par(mar=c(1.65,0,0,0), mgp=c(5, 0.5, 0))#
plot(x,y+0.035,type='l', ylim=range(c(0.02,y+0.035)), axes=FALSE)#
axis(1, at=c(-100, M, 100), labels=c('', expression(mu), ''))#
lines(c(0,22),rep(0.035,2))#
polygon(x,y+0.035,col='#BBBBBB')#
polygon(c(M-7, M+7,M),c(-0.2,-.2,0.035))#
#
#
# old plot: x <- rnorm(100^2); hist(x, prob=T, main='', xlab='', ylab='', axes=F); axis(1); x1 <- seq(-4,4,0.01); y1 <- dnorm(x1); lines(x1,y1)#
#
dev.off()
at=2:12#
prob=c(1:6, 5:1)/36#
#
# must load probDist#
par(mar=c(4.2,4.2,1,1))#
probDist(at, prob, xlab='dice sum',#
	ylab='probability', thickness=0.5)
#
probDist <- function(x, prob, labels1=NA,#
		labels2=NA, thickness=NA, col=NA, ylim=NULL, ...){#
	R <- range(x)#
	R <- R + c(-1,1)*(R[2]-R[1])/20#
	Ry <- c(0, range(prob)[2])#
	if(!is.null(ylim)[1]){#
		Ry <- ylim#
	}#
	plot(x, prob, type='n', axes=F, xlim=R, ylim=Ry, ...)#
	if(is.na(labels1)[1]) labels1 <- x#
	if(is.na(labels2)[1]) labels2 <- TRUE#
	axis(1, at=x, labels=labels1)#
	#axis(2)#
	make.bar(x, prob, thickness=thickness, col=col)#
	#abline(h=0)#
}#
#
make.bar <- function(at, height, thickness=NA, col=NA){#
	if(is.na(thickness)){#
		R <- range(at)#
		minDiff <- min(diff(at))#
		thickness <- min(c(minDiff), (R[2]-R[1])/12)#
	}#
	x1 <- at - thickness/2#
	x2 <- at + thickness/2#
	if(is.na(col))   col <- 'grey'#
	for(i in 1:length(at)){#
#		x <- c(x1[i], x1[i], x2[i], x2[i], x2[i])#
#		y <- c(0, height[i], height[i], 0, 0)#
		rect(x1[i], 0, x2[i], height[i], col=col)#
	}#
}#
#
#
pdf('diceSumDist.pdf', 5, 3)#
#
at=2:12#
prob=c(1:6, 5:1)/36#
#
# must load probDist#
par(mar=c(4.2,4.2,1,1))#
probDist(at, prob, xlab='dice sum',#
	ylab='probability', thickness=0.5)#
#
dev.off()
#
probDist <- function(x, prob, labels1=NA,#
		labels2=NA, thickness=NA, col=NA, ylim=NULL, ...){#
	R <- range(x)#
	R <- R + c(-1,1)*(R[2]-R[1])/20#
	Ry <- c(0, range(prob)[2])#
	if(!is.null(ylim)[1]){#
		Ry <- ylim#
	}#
	plot(x, prob, type='n', axes=F, xlim=R, ylim=Ry, ...)#
	if(is.na(labels1)[1]) labels1 <- x#
	if(is.na(labels2)[1]) labels2 <- TRUE#
	axis(1, at=x, labels=labels1)#
	#axis(2)#
	make.bar(x, prob, thickness=thickness, col=col)#
	#abline(h=0)#
}#
#
make.bar <- function(at, height, thickness=NA, col=NA){#
	if(is.na(thickness)){#
		R <- range(at)#
		minDiff <- min(diff(at))#
		thickness <- min(c(minDiff), (R[2]-R[1])/12)#
	}#
	x1 <- at - thickness/2#
	x2 <- at + thickness/2#
	if(is.na(col))   col <- 'grey'#
	for(i in 1:length(at)){#
#		x <- c(x1[i], x1[i], x2[i], x2[i], x2[i])#
#		y <- c(0, height[i], height[i], 0, 0)#
		rect(x1[i], 0, x2[i], height[i], col=col)#
	}#
}#
#
#
pdf('diceSumDist.pdf', 5, 3)#
#
at=2:12#
prob=c(1:6, 5:1)/36#
#
# must load probDist#
par(mar=c(4.2,4.2,1,1))#
probDist(at, prob, xlab='dice sum',#
	ylab='probability', thickness=0.5)#
abline(h=0)#
axis(2)#
#
dev.off()
#
probDist <- function(x, prob, labels1=NA,#
		labels2=NA, thickness=NA, col=NA, ylim=NULL, ...){#
	R <- range(x)#
	R <- R + c(-1,1)*(R[2]-R[1])/20#
	Ry <- c(0, range(prob)[2])#
	if(!is.null(ylim)[1]){#
		Ry <- ylim#
	}#
	plot(x, prob, type='n', axes=F, xlim=R, ylim=Ry, ...)#
	if(is.na(labels1)[1]) labels1 <- x#
	if(is.na(labels2)[1]) labels2 <- TRUE#
	axis(1, at=x, labels=labels1)#
	#axis(2)#
	make.bar(x, prob, thickness=thickness, col=col)#
	#abline(h=0)#
}#
#
make.bar <- function(at, height, thickness=NA, col=NA){#
	if(is.na(thickness)){#
		R <- range(at)#
		minDiff <- min(diff(at))#
		thickness <- min(c(minDiff), (R[2]-R[1])/12)#
	}#
	x1 <- at - thickness/2#
	x2 <- at + thickness/2#
	if(is.na(col))   col <- 'grey'#
	for(i in 1:length(at)){#
#		x <- c(x1[i], x1[i], x2[i], x2[i], x2[i])#
#		y <- c(0, height[i], height[i], 0, 0)#
		rect(x1[i], 0, x2[i], height[i], col=col)#
	}#
}#
#
#
pdf('diceSumDist.pdf', 5, 3)#
#
at=2:12#
prob=c(1:6, 5:1)/36#
#
# must load probDist#
par(mar=c(4.2,4.2,1,1), las=1)#
probDist(at, prob, xlab='dice sum',#
	ylab='probability', thickness=0.5)#
abline(h=0)#
axis(2)#
#
dev.off()
#
probDist <- function(x, prob, labels1=NA,#
		labels2=NA, thickness=NA, col=NA, ylim=NULL, ...){#
	R <- range(x)#
	R <- R + c(-1,1)*(R[2]-R[1])/20#
	Ry <- c(0, range(prob)[2])#
	if(!is.null(ylim)[1]){#
		Ry <- ylim#
	}#
	plot(x, prob, type='n', axes=F, xlim=R, ylim=Ry, ...)#
	if(is.na(labels1)[1]) labels1 <- x#
	if(is.na(labels2)[1]) labels2 <- TRUE#
	axis(1, at=x, labels=labels1)#
	#axis(2)#
	make.bar(x, prob, thickness=thickness, col=col)#
	#abline(h=0)#
}#
#
make.bar <- function(at, height, thickness=NA, col=NA){#
	if(is.na(thickness)){#
		R <- range(at)#
		minDiff <- min(diff(at))#
		thickness <- min(c(minDiff), (R[2]-R[1])/12)#
	}#
	x1 <- at - thickness/2#
	x2 <- at + thickness/2#
	if(is.na(col))   col <- 'grey'#
	for(i in 1:length(at)){#
#		x <- c(x1[i], x1[i], x2[i], x2[i], x2[i])#
#		y <- c(0, height[i], height[i], 0, 0)#
		rect(x1[i], 0, x2[i], height[i], col=col)#
	}#
}#
#
#
pdf('diceSumDist.pdf', 5, 3)#
#
at=2:12#
prob=c(1:6, 5:1)/36#
#
# must load probDist#
par(mar=c(3.7,4.5,1,1), las=1, mgp=c(2.5, 0.7, 0))#
probDist(at, prob, xlab='dice sum',#
	ylab='', thickness=0.5)#
abline(h=0)#
axis(2)#
mtext('probability', side=2, 3.3, las=0)#
dev.off()
#
probDist <- function(x, prob, labels1=NA,#
		labels2=NA, thickness=NA, col=NA, ylim=NULL, ...){#
	R <- range(x)#
	R <- R + c(-1,1)*(R[2]-R[1])/20#
	Ry <- c(0, range(prob)[2])#
	if(!is.null(ylim)[1]){#
		Ry <- ylim#
	}#
	plot(x, prob, type='n', axes=F, xlim=R, ylim=Ry, ...)#
	if(is.na(labels1)[1]) labels1 <- x#
	if(is.na(labels2)[1]) labels2 <- TRUE#
	axis(1, at=x, labels=labels1)#
	#axis(2)#
	make.bar(x, prob, thickness=thickness, col=col)#
	#abline(h=0)#
}#
#
make.bar <- function(at, height, thickness=NA, col=NA){#
	if(is.na(thickness)){#
		R <- range(at)#
		minDiff <- min(diff(at))#
		thickness <- min(c(minDiff), (R[2]-R[1])/12)#
	}#
	x1 <- at - thickness/2#
	x2 <- at + thickness/2#
	if(is.na(col))   col <- 'grey'#
	for(i in 1:length(at)){#
#		x <- c(x1[i], x1[i], x2[i], x2[i], x2[i])#
#		y <- c(0, height[i], height[i], 0, 0)#
		rect(x1[i], 0, x2[i], height[i], col=col)#
	}#
}#
#
#
pdf('diceSumDist.pdf', 5, 3)#
#
at=2:12#
prob=c(1:6, 5:1)/36#
#
# must load probDist#
par(mar=c(3.4,4.5,1,1), las=1, mgp=c(2.2, 0.7, 0))#
probDist(at, prob, xlab='dice sum',#
	ylab='', thickness=0.5)#
abline(h=0)#
axis(2)#
mtext('probability', side=2, 3.3, las=0)#
dev.off()
#
probDist <- function(x, prob, labels1=NA,#
		labels2=NA, thickness=NA, col=NA, ylim=NULL, ...){#
	R <- range(x)#
	R <- R + c(-1,1)*(R[2]-R[1])/20#
	Ry <- c(0, range(prob)[2])#
	if(!is.null(ylim)[1]){#
		Ry <- ylim#
	}#
	plot(x, prob, type='n', axes=F, xlim=R, ylim=Ry, ...)#
	if(is.na(labels1)[1]) labels1 <- x#
	if(is.na(labels2)[1]) labels2 <- TRUE#
	axis(1, at=x, labels=labels1)#
	#axis(2)#
	make.bar(x, prob, thickness=thickness, col=col)#
	#abline(h=0)#
}#
#
make.bar <- function(at, height, thickness=NA, col=NA){#
	if(is.na(thickness)){#
		R <- range(at)#
		minDiff <- min(diff(at))#
		thickness <- min(c(minDiff), (R[2]-R[1])/12)#
	}#
	x1 <- at - thickness/2#
	x2 <- at + thickness/2#
	if(is.na(col))   col <- 'grey'#
	for(i in 1:length(at)){#
#		x <- c(x1[i], x1[i], x2[i], x2[i], x2[i])#
#		y <- c(0, height[i], height[i], 0, 0)#
		rect(x1[i], 0, x2[i], height[i], col=col)#
	}#
}#
#
#
pdf('diceSumDist.pdf', 5.8, 3)#
#
at=2:12#
prob=c(1:6, 5:1)/36#
#
# must load probDist#
par(mar=c(3.4,4.5,1,1), las=1, mgp=c(2.2, 0.7, 0))#
probDist(at, prob, xlab='dice sum',#
	ylab='', thickness=0.5)#
abline(h=0)#
axis(2)#
mtext('probability', side=2, 3.3, las=0)#
dev.off()
#
probDist <- function(x, prob, labels1=NA,#
		labels2=NA, thickness=NA, col=NA, ylim=NULL, ...){#
	R <- range(x)#
	R <- R + c(-1,1)*(R[2]-R[1])/20#
	Ry <- c(0, range(prob)[2])#
	if(!is.null(ylim)[1]){#
		Ry <- ylim#
	}#
	plot(x, prob, type='n', axes=F, xlim=R, ylim=Ry, ...)#
	if(is.na(labels1)[1]) labels1 <- x#
	if(is.na(labels2)[1]) labels2 <- TRUE#
	axis(1, at=x, labels=labels1)#
	#axis(2)#
	make.bar(x, prob, thickness=thickness, col=col)#
	#abline(h=0)#
}#
#
make.bar <- function(at, height, thickness=NA, col=NA){#
	if(is.na(thickness)){#
		R <- range(at)#
		minDiff <- min(diff(at))#
		thickness <- min(c(minDiff), (R[2]-R[1])/12)#
	}#
	x1 <- at - thickness/2#
	x2 <- at + thickness/2#
	if(is.na(col))   col <- 'grey'#
	for(i in 1:length(at)){#
#		x <- c(x1[i], x1[i], x2[i], x2[i], x2[i])#
#		y <- c(0, height[i], height[i], 0, 0)#
		rect(x1[i], 0, x2[i], height[i], col=col)#
	}#
}#
#
#
pdf('diceSumDist.pdf', 5.5, 3)#
#
at=2:12#
prob=c(1:6, 5:1)/36#
#
# must load probDist#
par(mar=c(3.4,4.5,1,1), las=1, mgp=c(2.2, 0.7, 0))#
probDist(at, prob, xlab='dice sum',#
	ylab='', thickness=0.5)#
abline(h=0)#
axis(2)#
mtext('probability', side=2, 3.3, las=0)#
dev.off()
#
pdf('dieProp.pdf', 5.5,4)#
#
#===> simulate <===##
set.seed(51)#
n=10^5#
x <- sample(0:1,n, T, p=c(5/6,1/6))#
y <- cumsum(x)/1:n#
X <- c(1:100, seq(102, 500, 2),#
	seq(510, 1500, 10), seq(1550, 10000, 50),#
	seq(10100, 25000, 100), seq(25250, 100000, 250))#
Y <- y[X]#
#
#===> plotting <===##
par(mar=c(4,4.3,0,1),las=1)#
plot(X, Y, log='x', type='l', xlab='', ylab='', axes=F)#
mtext('n (number of rolls)', side=1, line=2.5)#
abline(h=1/6, lty=2)#
axis(1, at=10^(0:5), cex.axis=0.9, labels=c('1','10','100','1,000','10,000','100,000'))#
axis(2, cex.axis=0.9)#
axis(2, at=1/6, line=2.3, tick=FALSE, labels=expression(paste(hat(p)[n])), cex.axis=1.1)#
#
dev.off()
pdf('disjointSets.pdf', 3.5, 0.8)#
#
COL <- c('#22558888', '#885522BB', '#008800')#
par(mar=rep(0,4))#
plot(c(0.05,0.95), c(0.13,0.82), type='n', axes=F)#
#
for(i in 1:6){#
	text(i/7, 0.5, i)#
}#
theta <- seq(0,2*pi,length.out=100)#
#
#===> A <===##
lines(1/7*cos(theta)+1.5/7, 1/6*sin(theta)+0.5, col=COL[1])#
text(1.5/7, 0.75, 'A', col=COL[1])#
#
#===> B <===##
x <- 1/15*cos(seq(3*pi/2, 3*pi-0.3, length.out=40))+6/7#
y <- 1/6*sin(seq(3*pi/2, 3*pi, length.out=40))+0.5#
x <- c(x, seq(11/14, 9/14, length.out=10))#
y <- c(y, seq(-0.3, 0.3, length.out=10)^2+0.4)#
x <- c(x, 1/15*cos(seq(0.3, 3*pi/2, length.out=40))+4/7)#
y <- c(y, 1/6*sin(seq(0, 3*pi/2, length.out=40))+0.5)#
x <- c(x, x[1])#
y <- c(y, y[1])#
lines(x, y, lty=2, col=COL[2])#
text(5/7, 0.2, 'B', col=COL[2])#
#
#===> D <===##
lines(1/7*cos(theta)+2.5/7, 1/6*sin(theta)+0.5, lty=3, col=COL[3])#
text(2.5/7, 0.75, 'D', col=COL[3])#
#
dev.off()
pdf('disjointSets.pdf', 3.35, 0.8)#
#
COL <- c('#22558888', '#885522BB', '#008800')#
par(mar=rep(0,4))#
plot(c(0.05,0.95), c(0.13,0.82), type='n', axes=F)#
#
for(i in 1:6){#
	text(i/7, 0.5, i)#
}#
theta <- seq(0,2*pi,length.out=100)#
#
#===> A <===##
lines(1/7*cos(theta)+1.5/7, 1/6*sin(theta)+0.5, col=COL[1])#
text(1.5/7, 0.75, 'A', col=COL[1])#
#
#===> B <===##
x <- 1/15*cos(seq(3*pi/2, 3*pi-0.3, length.out=40))+6/7#
y <- 1/6*sin(seq(3*pi/2, 3*pi, length.out=40))+0.5#
x <- c(x, seq(11/14, 9/14, length.out=10))#
y <- c(y, seq(-0.3, 0.3, length.out=10)^2+0.4)#
x <- c(x, 1/15*cos(seq(0.3, 3*pi/2, length.out=40))+4/7)#
y <- c(y, 1/6*sin(seq(0, 3*pi/2, length.out=40))+0.5)#
x <- c(x, x[1])#
y <- c(y, y[1])#
lines(x, y, lty=2, col=COL[2])#
text(5/7, 0.2, 'B', col=COL[2])#
#
#===> D <===##
lines(1/7*cos(theta)+2.5/7, 1/6*sin(theta)+0.5, lty=3, col=COL[3])#
text(2.5/7, 0.75, 'D', col=COL[3])#
#
dev.off()
load("/Volumes/SERIN/openintro/ch2/fdicHistograms/fdicHistograms.RData")
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), col='#22558818', border='#22558840', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=TRUE)
library(openintro)
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), col='#22558818', border='#22558840', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=TRUE)
axis(1)#
lines(dens$x, dens$y, col='#225588')
histPlot
BR
COUNTS
length(BR[[2]])
length(COUNTS[[2]])
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(x)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(xlim)[1]){#
		ylim <- range(c(0,h))#
	}#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:h){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i],2), c(0,h[i]))#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR, COUNTS, xlab='height (cm)', axes=FALSE)
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(x)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(xlim)[1]){#
		ylim <- range(c(0,h))#
	}
col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL
col='#22558818'; border='#22558840'; probability=TRUE; xlab=''; ylab=NULL; xlim=NULL; ylim=NULL
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(x)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(xlim)[1]){#
		ylim <- range(c(0,h))#
	}
h
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(x)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(xlim)[1]){#
		ylim <- range(c(0,h))#
	}#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:h){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i],2), c(0,h[i]))#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(x)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(xlim)[1]){#
		ylim <- range(c(0,h))#
	}#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i],2), c(0,h[i]))#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(xlim)[1]){#
		ylim <- range(c(0,h))#
	}#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i],2), c(0,h[i]))#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(xlim)[1]){#
		ylim <- range(c(0,h))#
	}#
	cat(xlim, ylim)#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i],2), c(0,h[i]))#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(xlim)[1]){#
		ylim <- range(c(0,h))#
	}#
	cat(br)#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i],2), c(0,h[i]))#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(xlim)[1]){#
		ylim <- range(c(0,h))#
	}#
	cat(h)#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i],2), c(0,h[i]))#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(xlim)[1]){#
		ylim <- range(c(0,h))#
	}#
	cat(ylim[1], ylim[2])#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i],2), c(0,h[i]))#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(xlim)[1]){#
		ylim <- range(c(0,h))#
	}#
	cat(ylim[1], ylim[2])#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i],2), c(0,h[i]))#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i],2), c(0,h[i]))#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]))#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)
histTemp <- function(BR, COUNTS, col='#22558818', border='#22558840', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)
lines(dens$x, dens$y, col='#225588')
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE)#
axis(1)#
lines(dens$x, dens$y, col='#225588')
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE, xlim=c(125, max(BR[[2]]))#
axis(1)#
lines(dens$x, dens$y, col='#225588')
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE, xlim=c(125, max(BR[[2]])))#
axis(1)#
lines(dens$x, dens$y, col='#225588')
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE, xlim=c(125, 210))#
axis(1)#
lines(dens$x, dens$y, col='#225588')
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
	histTemp(list(BR[[i]], COUNTS[[i]]), xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1)#
}
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
BR[[3]] <- seq(110, 210, 1)#
BR[[4]] <- seq(110, 210, 0.5)#
COUNTS <- list()#
for(i in 1:4){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
#
cat("-------------------------------\n#
histPlot no longer works for what we have below.\n#
-------------------------------\n\n")#
#
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
	histTemp(list(BR[[i]], COUNTS[[i]]), xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1)#
}
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1)#
}
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 5)#
BR[[3]] <- seq(110, 210, 2.5)#
BR[[4]] <- seq(110, 210, 1)#
COUNTS <- list()#
for(i in 1:4){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
#
cat("-------------------------------\n#
histPlot no longer works for what we have below.\n#
-------------------------------\n\n")#
#
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1)#
}
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
#MIDS <- br[1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 5)#
BR[[3]] <- seq(110, 210, 2.5)#
BR[[4]] <- seq(110, 210, 1)#
COUNTS <- list()#
for(i in 1:4){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
#
cat("-------------------------------\n#
histPlot no longer works for what we have below.\n#
-------------------------------\n\n")#
#
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1)#
}
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
#MIDS <- br[1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 5)#
BR[[3]] <- seq(110, 210, 2)#
BR[[4]] <- seq(110, 210, 1)#
COUNTS <- list()#
for(i in 1:4){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1)#
}
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
histTemp <- function(BR, COUNTS, col='#22558828', border='#22558860', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE, xlim=c(125, 210))#
axis(1)#
lines(dens$x, dens$y, col='#225588')
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
#MIDS <- br[1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 5)#
BR[[3]] <- seq(110, 210, 2)#
BR[[4]] <- seq(110, 210, 1)#
COUNTS <- list()#
for(i in 1:4){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}
#
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1)#
}
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
histTemp <- function(BR, COUNTS, col='#22558830', border='#22558890', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE, xlim=c(125, 210))#
axis(1)#
lines(dens$x, dens$y, col='#225588')
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE, xlim=c(125, 210), col='#22558818', border='#22558840')#
axis(1)#
lines(dens$x, dens$y, col='#225588')
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
#MIDS <- br[1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 5)#
BR[[3]] <- seq(110, 210, 2)#
BR[[4]] <- seq(110, 210, 1)#
COUNTS <- list()#
for(i in 1:4){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
histTemp <- function(BR, COUNTS, col='#22558830', border='#225588AA', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
#
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1)#
}
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
#MIDS <- br[1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 5)#
BR[[3]] <- seq(110, 210, 2)#
BR[[4]] <- seq(110, 210, 1)#
COUNTS <- list()#
for(i in 1:4){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
histTemp <- function(BR, COUNTS, col='#22558840', border='#225588', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
#
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1)#
}
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1, cex.axis=0.9)#
}
par(mfrow=c(2,2), mar=c(2.7, 1, 1, 1), mgp=c(1.6, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1, cex.axis=0.9)#
}
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
histTemp <- function(BR, COUNTS, col='#22558830', border='#22558890', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
#
pdf('fdicHeightContDist.pdf', 5, 3)#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE, xlim=c(125, 210), col='#22558818', border='#22558840')#
axis(1)#
lines(dens$x, dens$y, col='#225588')#
dev.off()
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
histTemp <- function(BR, COUNTS, col='#22558830', border='#22558890', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
#
pdf('fdicHeightContDist.pdf', 5.8, 2.8)#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlab='height (cm)', axes=FALSE, xlim=c(125, 210), col='#22558818', border='#22558840')#
axis(1)#
lines(dens$x, dens$y, col='#225588')#
dev.off()
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
#MIDS <- br[1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 5)#
BR[[3]] <- seq(110, 210, 2)#
BR[[4]] <- seq(110, 210, 1)#
COUNTS <- list()#
for(i in 1:4){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
histTemp <- function(BR, COUNTS, col='#22558840', border='#225588', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
#
#
pdf('fdicHistograms.pdf', 7, 5)#
par(mfrow=c(2,2), mar=c(2.7, 1, 1, 1), mgp=c(1.6, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1, cex.axis=0.9)#
}#
dev.off()
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
#MIDS <- br[1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 5)#
BR[[3]] <- seq(110, 210, 2)#
BR[[4]] <- seq(110, 210, 1)#
COUNTS <- list()#
for(i in 1:4){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
histTemp <- function(BR, COUNTS, col='#22558840', border='#225588', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
#
#
pdf('fdicHistograms.pdf', 6, 4)#
par(mfrow=c(2,2), mar=c(2.7, 1, 1, 1), mgp=c(1.6, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1, cex.axis=0.9)#
}#
dev.off()
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
#MIDS <- br[1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 5)#
BR[[3]] <- seq(110, 210, 2)#
BR[[4]] <- seq(110, 210, 1)#
COUNTS <- list()#
for(i in 1:4){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
histTemp <- function(BR, COUNTS, col='#22558840', border='#225588', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
#
#
pdf('fdicHistograms.pdf', 6.2, 3)#
par(mfrow=c(2,2), mar=c(2.7, 1, 1, 1), mgp=c(1.6, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1, cex.axis=0.9)#
}#
dev.off()
#
pdf('fdicHistograms.pdf', 6.2, 3.5)#
par(mfrow=c(2,2), mar=c(2.7, 1, 1, 1), mgp=c(1.6, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1, cex.axis=0.9)#
}#
dev.off()
#
pdf('fdicHistograms.pdf', 6.2, 3.4)#
par(mfrow=c(2,2), mar=c(2.7, 1, 1, 1), mgp=c(1.6, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1, cex.axis=0.9)#
}#
dev.off()
#
pdf('fdicHistograms.pdf', 6.2, 3.3)#
par(mfrow=c(2,2), mar=c(2.7, 1, 1, 1), mgp=c(1.6, 0.7, 0))#
for(i in 1:4){#
	histTemp(BR[[i]], COUNTS[[i]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
	axis(1, cex.axis=0.9)#
}#
dev.off()
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
#
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], col='#22558818', border='#22558840', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', ylab='', probability=TRUE)#
axis(1)#
lines(dens$x, dens$y, col='#225588')#
these <- dens$x > 180 & dens$x < 185#
polygon(c(dens$x[these][1], dens$x[these], rev(dens$x[these])[1]), c(0, dens$y[these], 0), col='#225588BB', border='#225588BB')#
#
sum(dens$y[these]*diff(dens$x[1:2]))
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
#MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
#
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], col='#22558818', border='#22558840', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', ylab='', probability=TRUE)#
axis(1)#
lines(dens$x, dens$y, col='#225588')#
these <- dens$x > 180 & dens$x < 185#
polygon(c(dens$x[these][1], dens$x[these], rev(dens$x[these])[1]), c(0, dens$y[these], 0), col='#225588BB', border='#225588BB')#
#
sum(dens$y[these]*diff(dens$x[1:2]))
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
#MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
#
pdf('fdicHeightContDistFilled.pdf', 5, 2.73)#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], col='#22558818', border='#22558840', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', ylab='', probability=TRUE)#
axis(1)#
lines(dens$x, dens$y, col='#225588')#
these <- dens$x > 180 & dens$x < 185#
polygon(c(dens$x[these][1], dens$x[these], rev(dens$x[these])[1]), c(0, dens$y[these], 0), col='#225588BB', border='#225588BB')#
#
sum(dens$y[these]*diff(dens$x[1:2]))#
dev.off()
#
pdf('fdicHeightContDistFilled.pdf', 5.7, 2.73)#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], col='#22558818', border='#22558840', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', ylab='', probability=TRUE)#
axis(1)#
lines(dens$x, dens$y, col='#225588')#
these <- dens$x > 180 & dens$x < 185#
polygon(c(dens$x[these][1], dens$x[these], rev(dens$x[these])[1]), c(0, dens$y[these], 0), col='#225588BB', border='#225588BB')#
#
sum(dens$y[these]*diff(dens$x[1:2]))#
dev.off()
#
pdf('fdicHeightContDistFilled.pdf', 5.7, 2.75)#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], col='#22558818', border='#22558840', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', ylab='', probability=TRUE)#
axis(1)#
lines(dens$x, dens$y, col='#225588')#
these <- dens$x > 180 & dens$x < 185#
polygon(c(dens$x[these][1], dens$x[these], rev(dens$x[these])[1]), c(0, dens$y[these], 0), col='#225588BB', border='#225588BB')#
#
sum(dens$y[these]*diff(dens$x[1:2]))#
dev.off()
pdf('indepForRollingTwo1s.pdf', 4, 2.5)#
COL <- c('#225588DD', '#558822', '#660022')#
col <- c('#22558822', '#55882244', '#66002266')#
par(mar=rep(0,4))#
plot(0:1, c(0,1.1), type='n', axes=FALSE)#
x <- cos(seq(0,2*pi,length.out=99))#
y <- sin(seq(0,2*pi,length.out=99))#
#lines(x/2+0.5, y/2+0.5)#
text(0,1.05,pos=4, 'All rolls')#
rect(0,0,1,1)#
rect(1/6, 0, 2/6, 1, lty=2, border=COL[1], col=col[1])#
text(2/6, 0.7, '1/6th of the first\nrolls are a 1.', pos=4, col=COL[1])#
rect(1/6, 1/6, 2/6, 2/6, lty=3, border=COL[3], col=col[3])#
text(2/6, 3/12-0.02, '1/6th of those times where\nthe first roll is a 1 the\nsecond roll is also a 1.', pos=4, col=COL[3])#
#
#
dev.off()
pdf('indepForRollingTwo1s.pdf', 3.7, 2.5)#
COL <- c('#225588DD', '#558822', '#660022')#
col <- c('#22558822', '#55882244', '#66002266')#
par(mar=rep(0,4))#
plot(0:1, c(0,1.1), type='n', axes=FALSE)#
x <- cos(seq(0,2*pi,length.out=99))#
y <- sin(seq(0,2*pi,length.out=99))#
#lines(x/2+0.5, y/2+0.5)#
text(0,1.05,pos=4, 'All rolls')#
rect(0,0,1,1)#
rect(1/6, 0, 2/6, 1, lty=2, border=COL[1], col=col[1])#
text(2/6, 0.7, '1/6th of the first\nrolls are a 1.', pos=4, col=COL[1])#
rect(1/6, 1/6, 2/6, 2/6, lty=3, border=COL[3], col=col[3])#
text(2/6, 3/12-0.02, '1/6th of those times where\nthe first roll is a 1 the\nsecond roll is also a 1.', pos=4, col=COL[3])#
#
#
dev.off()
pdf('indepForRollingTwo1s.pdf', 3.7, 2.2)#
COL <- c('#225588DD', '#558822', '#660022')#
col <- c('#22558822', '#55882244', '#66002266')#
par(mar=rep(0,4))#
plot(0:1, c(0,1.1), type='n', axes=FALSE)#
x <- cos(seq(0,2*pi,length.out=99))#
y <- sin(seq(0,2*pi,length.out=99))#
#lines(x/2+0.5, y/2+0.5)#
text(0,1.05,pos=4, 'All rolls')#
rect(0,0,1,1)#
rect(1/6, 0, 2/6, 1, lty=2, border=COL[1], col=col[1])#
text(2/6, 0.7, '1/6th of the first\nrolls are a 1.', pos=4, col=COL[1])#
rect(1/6, 1/6, 2/6, 2/6, lty=3, border=COL[3], col=col[3])#
text(2/6, 3/12-0.02, '1/6th of those times where\nthe first roll is a 1 the\nsecond roll is also a 1.', pos=4, col=COL[3])#
#
#
dev.off()
pdf('indepForRollingTwo1s.pdf', 3.7, 2.25)#
COL <- c('#225588DD', '#558822', '#660022')#
col <- c('#22558822', '#55882244', '#66002266')#
par(mar=rep(0,4))#
plot(0:1, c(0,1.1), type='n', axes=FALSE)#
x <- cos(seq(0,2*pi,length.out=99))#
y <- sin(seq(0,2*pi,length.out=99))#
#lines(x/2+0.5, y/2+0.5)#
text(0,1.05,pos=4, 'All rolls')#
rect(0,0,1,1)#
rect(1/6, 0, 2/6, 1, lty=2, border=COL[1], col=col[1])#
text(2/6, 0.7, '1/6th of the first\nrolls are a 1.', pos=4, col=COL[1])#
rect(1/6, 1/6, 2/6, 2/6, lty=3, border=COL[3], col=col[3])#
text(2/6, 3/12-0.02, '1/6th of those times where\nthe first roll is a 1 the\nsecond roll is also a 1.', pos=4, col=COL[3])#
#
#
dev.off()
#
# must generalize for more than 4 branches (6, 8, etc.)#
tree.diag <- function(var1, var2, y, yy, ny, resp1=c('yes','no'), resp2=c('yes','no'), header.size=1.5,space.left=0, space.right=0, final.prob.sub=NA){#
	par(mar=c(0,0,0,0))#
	n <- 1-y#
	yn <- 1-yy#
	nn <- 1-ny#
	plot(1,1,type='n', axes=F, ylim=c(.25,.88),#
		xlim=c(-space.left*.62,.62+space.right*.62), xlab='', ylab='')#
#
	#===> branches <===##
	points(c(.2,0,.2),c(.65,.5,.35),type='l')#
	points(c(.45,.2,.45),c(.75,.65,.55),type='l')#
	points(c(.45,.2,.45),c(.25,.35,.45),type='l')#
#
	#===> headers <===##
	text(.07,.75,var1,cex=header.size)#
	text(.31,.85,var2,cex=header.size)#
#
	#===> first branches <===##
	text(rep(.05,2), .5+.09*c(1,-1), resp1)#
	text(rep(.13,2), .5+.06*c(1,-1), c(y,n))#
	#
	#===> second branches <===##
	text(rep(.25,4), c(.72,.58,.42,.28),rep(resp2,2))#
	text(rep(.33,4),c(.56,.75,.26,.44),c(yn,yy,nn,ny))#
	#
	#===> final probabilities <===##
	if(is.na(final.prob.sub[1])){#
		res <- paste(yy,'*',y,' = ',yy*y,sep='')#
		res[2] <- paste(yn,'*',y,' = ',yn*y,sep='')#
		res[3] <- paste(ny,'*',n,' = ',ny*n,sep='')#
		res[4] <- paste(nn,'*',n,' = ',nn*n,sep='')#
		text(rep(.45,4),c(.75,.55,.45,.25),res,pos=4)#
	} else {#
		text(rep(.45,4),c(.75,.55,.45,.25),final.prob.sub,pos=4)	#
	}#
}#
#
# Examples#
# generic with random probabilities#
	tree.diag('Dow Jones rise?', 'NASDAQ rise?', 0.53, 0.75, 0.72)#
	tree.diag('header 1', 'header 2', 0.65, 0.95, 0.3, c('resp1.top','resp2.bottom'),c('resp2.top','resp2.bottom'),header.size = 1.3)#
# example of possible use#
	tree.diag('flight on time?', 'luggage on time?', 0.65, 0.95, 0.3,header.size = 1.3,space.left=.3,space.right=.4)#
	tree.diag('flight on time?', 'luggage on time?', 0.65, 0.95, 0.3,header.size = 1.3,space.left=.3,space.right=.4,final.prob.sub=c('(a)','(b)','(c)','(d)'))#
	#
	#
# load tree.diag first#
tree.diag('Midterm','Final',c(0.13,0.87),#
	list(c(0.47,0.53),c(0.11,0.89)),#
	c('A','other'),c('A','other'))
#
# must generalize for more than 4 branches (6, 8, etc.)#
tree.diag <- function(var1, var2, p1=c(), p2=list(), resp1=c('yes','no'), resp2=c('yes','no'), header.size=1.5,space.left=0, space.right=0, final.prob.sub=list(NA), digits=4){#
	#
	n1 <- length(p1)#
	n2 <- length(p2[[1]])#
	if(sum(p1) != 1) warning('marginal probabilities do not sum to 1')#
	if(n1 != length(resp1)) stop('the number of responses for the first variable is not equal to the number of probabilities')#
	for(i in 1:n1){#
		if(sum(p2[[i]]) != 1) warning(paste('marginal probabilities for p2, position',i,'do not sum to 1'))#
		if(length(p2[[i]]) != n2) stop(paste('the number of responses for the second variable does not equal the number of probabilities in position',i))#
	}#
#
	bounds <- c(-.9,.6)#
	ctr <- mean(bounds)#
	par(mar=rep(0,4))#
	plot(1,1,type='n', axes=F, ylim=c(-1,1),#
		xlim=c(-space.left,1+space.right*.62), xlab='', ylab='')#
#
	pos2 <- seq(bounds[1],bounds[2],length.out=n1*n2)#
	pos2 <- matrix(pos2, n1,n2,byrow=T)#
	pos1 <- vector()#
	for(i in 1:n1)   pos1[i] <- mean(pos2[i,])#
	#
	for(i in 1:n1){#
		points(c(0,.3),c(ctr,pos1[i]),type='l')#
		for(j in 1:n2)	points(c(.3,.7),c(pos1[i],pos2[i,j]),type='l')#
	}#
#
	#===> headers <===##
	text(.12,.8,var1,cex=header.size)#
	text(.46,.9,var2,cex=header.size)#
#
	#===> names and probabilities <===##
	if(as.integer(n1) - n1 == 0)#
		temp <- (n1 + 1)/2#
	x <- c(0,.3)#
	mult <- 0.06 - 0.025*n1*n2/9#
	if(n1 == 3 & n2 == 3) mult <- 0.035#
	for(i in 1:n1){#
		y <- c(ctr,pos1[n1-i+1])#
		text(c(.09,.21), ((2:1)*y[1] + (1:2)*y[2])/3 + 0.05*sign(y[2]-y[1]+0.001)*c(1,-1), c(resp1[i],as.character(p1[i])))#
		temp <- 0#
		for(j in 1:n2){#
			y1 <- c(y[2],pos2[n1-i+1,n2-j+1])#
			text(c(.44,.58)+temp, ((2:1)*y1[1] + (1:2)*y1[2])/3 + mult*sign(y1[2]-y1[1]+0.001)*c(1,-1), c(resp2[j],as.character(p2[[i]][j])))#
			if(n2 > 2)   temp <- temp + .03#
			if(temp > .03)   temp <- 0#
			final.prob <- paste(p1[i],'*',p2[[i]][j],' = ',round(p1[i]*p2[[i]][j], digits),sep='')#
			if(!is.na(final.prob.sub[[1]][1])) final.prob <- final.prob.sub[[i]][j]#
			text(.7,y1[2],final.prob,pos=4)#
		}#
	}#
}#
tree.diag('flight on time?','luggage on time?',c(.8,.2),list(c(.97,.03),c(.15,.85)))#
tree.diag('breakfast?','go to class',c(.4,.6),list(c(.4,.36,.34),c(.6,.3,.1)),c('y','n'),c('stat','Eng','soc'))#
tree.diag('breakfast?','go to class',c(.4,.11,.49),list(c(.4,.36,.24),c(.6,.3,.1),c(.1,.4,.5)),c('one','two','three'),c('stat','Eng','soc'))
#
	#
# load tree.diag first#
tree.diag('Midterm','Final',c(0.13,0.87),#
	list(c(0.47,0.53),c(0.11,0.89)),#
	c('A','other'),c('A','other'))
#
# must generalize for more than 4 branches (6, 8, etc.)#
tree.diag <- function(var1, var2, p1=c(), p2=list(), resp1=c('yes','no'), resp2=c('yes','no'), header.size=1.5,space.left=0, space.right=0, final.prob.sub=list(NA), digits=4){#
	#
	n1 <- length(p1)#
	n2 <- length(p2[[1]])#
	if(sum(p1) != 1) warning('marginal probabilities do not sum to 1')#
	if(n1 != length(resp1)) stop('the number of responses for the first variable is not equal to the number of probabilities')#
	for(i in 1:n1){#
		if(sum(p2[[i]]) != 1) warning(paste('marginal probabilities for p2, position',i,'do not sum to 1'))#
		if(length(p2[[i]]) != n2) stop(paste('the number of responses for the second variable does not equal the number of probabilities in position',i))#
	}#
#
	bounds <- c(-.9,.6)#
	ctr <- mean(bounds)#
	par(mar=rep(0,4))#
	plot(1,1,type='n', axes=F, ylim=c(-1,1),#
		xlim=c(-space.left,1+space.right*.62), xlab='', ylab='')#
#
	pos2 <- seq(bounds[1],bounds[2],length.out=n1*n2)#
	pos2 <- matrix(pos2, n1,n2,byrow=T)#
	pos1 <- vector()#
	for(i in 1:n1)   pos1[i] <- mean(pos2[i,])#
	#
	for(i in 1:n1){#
		points(c(0,.3),c(ctr,pos1[i]),type='l')#
		for(j in 1:n2)	points(c(.3,.7),c(pos1[i],pos2[i,j]),type='l')#
	}#
#
	#===> headers <===##
	text(.12,.8,var1,cex=header.size)#
	text(.46,.9,var2,cex=header.size)#
#
	#===> names and probabilities <===##
	if(as.integer(n1) - n1 == 0)#
		temp <- (n1 + 1)/2#
	x <- c(0,.3)#
	mult <- 0.06 - 0.025*n1*n2/9#
	if(n1 == 3 & n2 == 3) mult <- 0.035#
	for(i in 1:n1){#
		y <- c(ctr,pos1[n1-i+1])#
		text(c(.09,.21), ((2:1)*y[1] + (1:2)*y[2])/3 + 0.05*sign(y[2]-y[1]+0.001)*c(1,-1), c(resp1[i],as.character(p1[i])))#
		temp <- 0#
		for(j in 1:n2){#
			y1 <- c(y[2],pos2[n1-i+1,n2-j+1])#
			text(c(.44,.58)+temp, ((2:1)*y1[1] + (1:2)*y1[2])/3 + mult*sign(y1[2]-y1[1]+0.001)*c(1,-1), c(resp2[j],as.character(p2[[i]][j])))#
			if(n2 > 2)   temp <- temp + .03#
			if(temp > .03)   temp <- 0#
			final.prob <- paste(p1[i],'*',p2[[i]][j],' = ',round(p1[i]*p2[[i]][j], digits),sep='')#
			if(!is.na(final.prob.sub[[1]][1])) final.prob <- final.prob.sub[[i]][j]#
			text(.7,y1[2],final.prob,pos=4)#
		}#
	}#
}#
tree.diag('flight on time?','luggage on time?',c(.8,.2),list(c(.97,.03),c(.15,.85)))#
tree.diag('breakfast?','go to class',c(.4,.6),list(c(.4,.36,.34),c(.6,.3,.1)),c('y','n'),c('stat','Eng','soc'))#
tree.diag('breakfast?','go to class',c(.4,.11,.49),list(c(.4,.36,.24),c(.6,.3,.1),c(.1,.4,.5)),c('one','two','three'),c('stat','Eng','soc'))#
#
#
# load tree.diag first#
pdf('testTree.pdf', 5, 3)#
tree.diag('Midterm','Final',c(0.13,0.87),#
	list(c(0.47,0.53),c(0.11,0.89)),#
	c('A','other'),c('A','other'))#
dev.off()
#
# must generalize for more than 4 branches (6, 8, etc.)#
tree.diag <- function(var1, var2, p1=c(), p2=list(), resp1=c('yes','no'), resp2=c('yes','no'), header.size=1.5,space.left=0, space.right=0, final.prob.sub=list(NA), digits=4){#
	#
	n1 <- length(p1)#
	n2 <- length(p2[[1]])#
	if(sum(p1) != 1) warning('marginal probabilities do not sum to 1')#
	if(n1 != length(resp1)) stop('the number of responses for the first variable is not equal to the number of probabilities')#
	for(i in 1:n1){#
		if(sum(p2[[i]]) != 1) warning(paste('marginal probabilities for p2, position',i,'do not sum to 1'))#
		if(length(p2[[i]]) != n2) stop(paste('the number of responses for the second variable does not equal the number of probabilities in position',i))#
	}#
#
	bounds <- c(-.9,.6)#
	ctr <- mean(bounds)#
	par(mar=rep(0,4))#
	plot(1,1,type='n', axes=F, ylim=c(-1,1),#
		xlim=c(-space.left,1+space.right*.62), xlab='', ylab='')#
#
	pos2 <- seq(bounds[1],bounds[2],length.out=n1*n2)#
	pos2 <- matrix(pos2, n1,n2,byrow=T)#
	pos1 <- vector()#
	for(i in 1:n1)   pos1[i] <- mean(pos2[i,])#
	#
	for(i in 1:n1){#
		points(c(0,.3),c(ctr,pos1[i]),type='l')#
		for(j in 1:n2)	points(c(.3,.7),c(pos1[i],pos2[i,j]),type='l')#
	}#
#
	#===> headers <===##
	text(.12,.8,var1,cex=header.size)#
	text(.46,.9,var2,cex=header.size)#
#
	#===> names and probabilities <===##
	if(as.integer(n1) - n1 == 0)#
		temp <- (n1 + 1)/2#
	x <- c(0,.3)#
	mult <- 0.06 - 0.025*n1*n2/9#
	if(n1 == 3 & n2 == 3) mult <- 0.035#
	for(i in 1:n1){#
		y <- c(ctr,pos1[n1-i+1])#
		text(c(.09,.21), ((2:1)*y[1] + (1:2)*y[2])/3 + 0.05*sign(y[2]-y[1]+0.001)*c(1,-1), c(resp1[i],as.character(p1[i])))#
		temp <- 0#
		for(j in 1:n2){#
			y1 <- c(y[2],pos2[n1-i+1,n2-j+1])#
			text(c(.44,.58)+temp, ((2:1)*y1[1] + (1:2)*y1[2])/3 + mult*sign(y1[2]-y1[1]+0.001)*c(1,-1), c(resp2[j],as.character(p2[[i]][j])))#
			if(n2 > 2)   temp <- temp + .03#
			if(temp > .03)   temp <- 0#
			final.prob <- paste(p1[i],'*',p2[[i]][j],' = ',round(p1[i]*p2[[i]][j], digits),sep='')#
			if(!is.na(final.prob.sub[[1]][1])) final.prob <- final.prob.sub[[i]][j]#
			text(.7,y1[2],final.prob,pos=4)#
		}#
	}#
}# load tree.diag first#
pdf('testTree.pdf', 5, 3)#
tree.diag('Midterm','Final',c(0.13,0.87),#
	list(c(0.47,0.53),c(0.11,0.89)),#
	c('A','other'),c('A','other'))#
dev.off()
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
histTemp <- function(BR, COUNTS, col='#22558840', border='#225588', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
#
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588BB', border='#22558800')#
rect(BR[[2]][28], 0, BR[[2]][29], COUNTS[[2]][28], col='#225588BB', border='#22558800')
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
#MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
histTemp <- function(BR, COUNTS, col='#22558840', border='#225588', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
axis(1)
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588BB', border='#22558800')
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=FALSE)#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588BB', border='#22558800')#
rect(BR[[2]][28], 0, BR[[2]][29], COUNTS[[2]][28], col='#225588BB', border='#22558800')
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=FALSE)#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588BB', border='#22558800')#
rect(BR[[2]][28], 0, BR[[2]][29], COUNTS[[2]][28], col='#225588BB', border='#22558800')
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
#MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
	COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
	for(j in 1:(length(BR[[i]])-1)){#
		these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
		if(any(these)){#
			COUNTS[[i]][j] <- sum(counts[these])#
		}#
	}#
}#
#
histTemp <- function(BR, COUNTS, col='#22558840', border='#225588', probability=TRUE, xlab='', ylab=NULL, xlim=NULL, ylim=NULL, ...){#
	br <- BR#
	h  <- COUNTS#
	if(probability){#
		h <- h/sum(h)/diff(br)#
	}#
	if(is.null(ylab)){#
		ylab <- 'frequency'#
		if(probability){#
			ylab <- 'probability'#
		}#
	}#
	if(is.null(xlim)[1]){#
		xR <- range(br)#
		xlim <- xR + c(-0.05, 0.05)*diff(xR)#
	}#
	if(is.null(ylim)[1]){#
		ylim <- range(c(0,h))#
	}#
#	cat()#
	plot(-1, -1, xlab=xlab, ylab=ylab, xlim=xlim, ylim=ylim, type='n', ...)#
	abline(h=0)#
	lines(c(br[1],br[1]), c(0,h[1]), col=border)#
	for(i in 1:length(h)){#
		if(i > 1){#
			if(h[i] > h[i-1]){#
				lines(rep(br[i],2), h[c(i-1,i)], col=border)#
			}#
		}#
		lines(br[i+0:1], rep(h[i],2), col=border)#
		lines(rep(br[i+1],2), c(0,h[i]), col=border)#
		rect(br[i], 0, br[i+1], h[i], col=col, border='#00000000')#
	}#
}#
#
#
pdf('usHeightsHist180185.pdf', 6, 2.75)#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histTemp(BR[[2]], COUNTS[[2]], xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=FALSE)#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588BB', border='#22558800')#
rect(BR[[2]][28], 0, BR[[2]][29], COUNTS[[2]][28], col='#225588BB', border='#22558800')#
dev.off()
#
p <- c(0.28, 0.27, 0.29, 0.16)#
names(p) <- c('0-25', '25-50', '50-100', '100+')#
par(mar=c(4.3, 5.2, 1,1), mgp=c(2.4, 0.7, 0), las=1)#
barplot(p, xlab='US household incomes ($1000s)')#
par(las=0)#
mtext('probability', side=2, line=3.7)#
abline(h=0)
pdf('usHousholdIncomeDistBar.pdf', 5, 3)#
p <- c(0.28, 0.27, 0.29, 0.16)#
names(p) <- c('0-25', '25-50', '50-100', '100+')#
par(mar=c(4.3, 5.2, 1,1), mgp=c(2.4, 0.7, 0), las=1)#
barplot(p, xlab='US household incomes ($1000s)')#
par(las=0)#
mtext('probability', side=2, line=3.7)#
abline(h=0)#
dev.off()
pdf('usHousholdIncomeDistBar.pdf', 5.5, 3.1)#
p <- c(0.28, 0.27, 0.29, 0.16)#
names(p) <- c('0-25', '25-50', '50-100', '100+')#
par(mar=c(4.3, 5.2, 1,1), mgp=c(2.4, 0.7, 0), las=1)#
barplot(p, xlab='US household incomes ($1000s)')#
par(las=0)#
mtext('probability', side=2, line=3.7)#
abline(h=0)#
dev.off()
#
pdf('venn.pdf', 3, 1.7)#
par(mar=c(0,0,0,0))#
plot(c(0.2,1.8), c(0,1), type='n')#
#
z <- seq(0,2*pi, len=99)#
x1 <- cos(z)/2+0.7#
y1 <- sin(z)/3+0.5#
lines(c(x1, x1[1]),c(y1, y1[1]))#
#
x2 <- cos(z)/2+1.3#
y2 <- sin(z)/3+0.5#
lines(c(x2, x2[1]),c(y2, y2[1]))#
#
text(0.7, 0.9, 'Diamonds')#
text(1.3, 0.9, 'Face cards')#
text(c(0.55, 1, 1.45), rep(0.57, 3), c(10, 3, 9), cex=1.3)#
text(c(0.55, 1, 1.45), rep(0.41, 3), c('10/52', '3/52', '9/52'),#
	cex=1, col='#888888'); text(1.4, 0.07, 'Other cards: 30')#
dev.off()
#
pdf('venn.pdf', 2.95, 1.65)#
par(mar=c(0,0,0,0))#
plot(c(0.2,1.8), c(0,1), type='n')#
#
z <- seq(0,2*pi, len=99)#
x1 <- cos(z)/2+0.7#
y1 <- sin(z)/3+0.5#
lines(c(x1, x1[1]),c(y1, y1[1]))#
#
x2 <- cos(z)/2+1.3#
y2 <- sin(z)/3+0.5#
lines(c(x2, x2[1]),c(y2, y2[1]))#
#
text(0.7, 0.9, 'Diamonds')#
text(1.3, 0.9, 'Face cards')#
text(c(0.55, 1, 1.45), rep(0.57, 3), c(10, 3, 9), cex=1.3)#
text(c(0.55, 1, 1.45), rep(0.41, 3), c('10/52', '3/52', '9/52'),#
	cex=1, col='#888888'); text(1.4, 0.07, 'Other cards: 30')#
dev.off()
sqrt(.06*.94/300)
(.06*.94/300)
