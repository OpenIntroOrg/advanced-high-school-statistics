}
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(120, 205))#
}
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(130, 205))#
}
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(130, 210))#
}
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(130, 210), axes=FALSE)#
axis(1)#
}
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(130, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
}
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
BR[[3]] <- seq(110, 210, 1)#
BR[[4]] <- seq(110, 210, 0.5)#
COUNTS <- list()#
for(i in 1:4){#
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
for(j in 1:(length(BR[[i]])-1)){#
these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
if(any(these)){#
COUNTS[[i]][j] <- sum(counts[these])#
}#
}#
}#
#
#
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(130, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
}
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(120, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
}
counts
cbind(MIDS, counts)
count
count <- counts
counts[119]
counts[118]
counts[119] <- 43870
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
BR[[3]] <- seq(110, 210, 1)#
BR[[4]] <- seq(110, 210, 0.5)#
COUNTS <- list()#
for(i in 1:4){#
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
for(j in 1:(length(BR[[i]])-1)){#
these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
if(any(these)){#
COUNTS[[i]][j] <- sum(counts[these])#
}#
}#
}#
#
#
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(120, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
}
coun
coun <- counts
cbind(MIDS, counts)
counts <- count
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
BR[[3]] <- seq(110, 210, 1)#
BR[[4]] <- seq(110, 210, 0.5)#
COUNTS <- list()#
for(i in 1:4){#
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
for(j in 1:(length(BR[[i]])-1)){#
these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
if(any(these)){#
COUNTS[[i]][j] <- sum(counts[these])#
}#
}#
}#
#
#
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(120, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
}
plot(dens)
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
BR[[3]] <- seq(110, 210, 1)#
BR[[4]] <- seq(110, 210, 0.5)#
COUNTS <- list()#
for(i in 1:4){#
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
for(j in 1:(length(BR[[i]])-1)){#
these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
if(any(these)){#
COUNTS[[i]][j] <- sum(counts[these])#
}#
}#
}#
#
#
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(120, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
}
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(135, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
}
sum(counts)
140/2.54
140/2.54/12
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
}
#
#d <- read.delim('fdic.txt', TRUE, sep=',')#
#s  <- d$samplingWeight#
#these <- (!is.na(s) & d$age > 17)#
#BD <- d$birthDate[these]#
#H  <- d$height1[these]#
#s  <- s[these]#
#rm(d)#
#set.seed(50)#
#
#
#N  <- 3*10^6#
#bd <- sample(BD, N, TRUE, s)#
#h  <- sample(H, N, TRUE, s) + rnorm(N, 0, 1.5)#
#br <- seq(116, 208, 0.5)#
#counts <- rep(NA, 200)#
#for(i in 1:200){#
#	counts[i] <- sum(h >= br[i] & h < br[i+1])#
#}#
#dens <- density(h)#
#counts <- counts[br > 115 & br < 208]#
#counts <- counts[-1]#
#br <- br[br > 115 & br < 208]#
#br <- br+0.5#
#
#br <- c(114.5, 115, 115.5, br, 208.5, 209)#
#counts <- c(0, 0, 0, counts, 0, 0)#
#counts[118:121] <- c()#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
BR[[3]] <- seq(110, 210, 1)#
BR[[4]] <- seq(110, 210, 0.5)#
COUNTS <- list()#
for(i in 1:4){#
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
for(j in 1:(length(BR[[i]])-1)){#
these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
if(any(these)){#
COUNTS[[i]][j] <- sum(counts[these])#
}#
}#
}#
#
#
#
par(mfrow=c(2,2), mar=c(2.5, 1, 1, 1), mgp=c(1.5, 0.7, 0))#
for(i in 1:4){#
histPlot(list(BR[[i]], COUNTS[[i]]), xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
}
MIDS > 180 & MIDS < 185
counts[MIDS > 180 & MIDS < 185]
counts[MIDS > 180 & MIDS < 185][1:5]
counts[MIDS > 180 & MIDS < 185][5:10]
sum(counts[MIDS > 180 & MIDS < 185][5:10])
sum(counts[MIDS > 180 & MIDS < 185][1:5])
sum(counts[MIDS > 180 & MIDS < 185][6:10])
sum(counts[MIDS > 180 & MIDS < 185])/3000000
sum(counts[MIDS > 180 & MIDS < 185])/30000
par(mfrow=c(1,1), mar=c(3, 1, 1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
axis(1)
BR[[2]]
cbind(BR[[2]][-1], COUNTS[[2]])
cbind(BR[[2]][-39], COUNTS[[2]])
par(mfrow=c(1,1), mar=c(3, 1, 1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588', border='#225588')
par(mfrow=c(1,1), mar=c(3, 1, 1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588', border='#22558800')#
rect(BR[[2]][28], 0, BR[[2]][29], COUNTS[[2]][28], col='#225588', border='#22558800')
par(mfrow=c(1,1), mar=c(3, 1, 1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588DD', border='#22558800')#
rect(BR[[2]][28], 0, BR[[2]][29], COUNTS[[2]][28], col='#225588DD', border='#22558800')
par(mfrow=c(1,1), mar=c(3, 1, 1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588BB', border='#22558800')#
rect(BR[[2]][28], 0, BR[[2]][29], COUNTS[[2]][28], col='#225588BB', border='#22558800')
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), xlim=c(125, 210), axes=FALSE, xlab='height (cm)')#
axis(1)#
rect(BR[[2]][27], 0, BR[[2]][28], COUNTS[[2]][27], col='#225588BB', border='#22558800')#
rect(BR[[2]][28], 0, BR[[2]][29], COUNTS[[2]][28], col='#225588BB', border='#22558800')
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=TRUE)#
axis(1)
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], col='#22558822', border='#22558855', COUNTS[[2]]), xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=TRUE)#
axis(1)
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), col='#22558822', border='#22558855', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=TRUE)#
axis(1)
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), col='#22558818', border='#22558844', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=TRUE)#
axis(1)
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), col='#22558818', border='#22558840', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=TRUE)#
axis(1)
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), col='#22558818', border='#22558840', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=TRUE)#
axis(1)#
lines(dens$x, dens$y)
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), col='#22558818', border='#22558840', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=TRUE)#
axis(1)#
lines(dens$x, dens$y, col='#225588')
58
58*2.54
#
#===> load in the data set from fdicHistograms <===##
#
BR <- list()#
MIDS <- br[-1]-0.25#
BR[[1]] <- seq(110, 210, 10)#
BR[[2]] <- seq(115, 210, 2.5)#
COUNTS <- list()#
for(i in 1:2){#
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)#
for(j in 1:(length(BR[[i]])-1)){#
these <- apply(cbind(MIDS < BR[[i]][j+1], MIDS >= BR[[i]][j]), 1, all)#
if(any(these)){#
COUNTS[[i]][j] <- sum(counts[these])#
}#
}#
}#
#
#
#
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), col='#22558818', border='#22558840', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=TRUE)#
axis(1)#
lines(dens$x, dens$y, col='#225588')
dens$x
par(mfrow=c(1,1), mar=c(3, 1, 0.1, 1), mgp=c(1.8, 0.7, 0))#
histPlot(list(BR[[2]], COUNTS[[2]]), col='#22558818', border='#22558840', xlim=c(125, 210), axes=FALSE, xlab='height (cm)', probability=TRUE)#
axis(1)#
lines(dens$x, dens$y, col='#225588')#
these <- dens$x > 180 & dens$x < 185#
polygon(c(dens$x[these][1], dens$x[these], rev(dens$x[these])[1]), c(0, dens$y[these], 0), col='#225588BB', border='#225588BB')
sum(dens$y[these]/diff(dens$x[range(these)])
)
diff(dens$x[range(these)])
sum(dens$y[these])/diff(dens$x[range(these)])
these
sum(dens$y[these])/diff(dens$x[range(which(these))])
sum(dens$y[these])
sum(dens$y[these])/5
sum(dens$y[these])*diff(dens$x[range(which(these))])/5
sum(dens$y[these])*diff(dens$x[range(which(these))])/5/5
sum(dens$y[these]*diff(dens$x[c(these,rev(these)[1]+1)]))
diff(dens$x[c(these,rev(these)[1]+1)])
dens$x[these]
diff(dens$x[these])
sum(dens$y[these]*diff(dens$x[1:2]))
180/12/2.54
.905*12
sum(dens$y[these]*diff(dens$x[1:2]))
library(openintro)
data(COL)
load("fdicHistograms.rda")
MIDS <- br[-1] - diff(br[1:2]) / 2
BR <- list()
BR[[1]] <- seq(110, 210, 10)
BR[[2]] <- seq(115, 210, 5)
BR[[3]] <- seq(110, 210, 2)
BR[[4]] <- seq(110, 210, 1)
COUNTS <- list()
for (i in 1:4) {
COUNTS[[i]] <- rep(0, length(BR[[i]])-1)
for (j in 1:(length(BR[[i]])-1)) {
these <- apply(cbind(MIDS < BR[[i]][j+1],
MIDS >= BR[[i]][j]),
1,
all)
if (any(these)) {
COUNTS[[i]][j] <- sum(counts[these])
}
}
}
histTemp <- function(
BR, COUNTS, col = fadeColor(COL[1], "10"),
border = COL[1,4], probability = FALSE,
xlab = '', ylab = NULL,
xlim = NULL, ylim = NULL,
...) {
br <- BR
h  <- COUNTS
if (probability) {
h <- h / sum(h) / diff(br)
}
if (is.null(ylab)) {
ylab <- 'frequency'
if (probability) {
ylab <- 'probability'
}
}
if (is.null(xlim)[1]) {
xR <- range(br)
xlim <- xR + c(-0.05, 0.05) * diff(xR)
}
if (is.null(ylim)[1]) {
ylim <- range(c(0, h))
}
plot(-1, -1,
xlab = xlab,
ylab = ylab,
xlim = xlim,
ylim = ylim,
type = 'n',
...)
abline(h = 0)
lines(c(br[1], br[1]), c(0, h[1]), col = border)
for (i in 1:length(h)) {
if (i > 1) {
if (h[i] > h[i-1]) {
lines(rep(br[i], 2), h[c(i - 1, i)], col = border)
}
}
lines(br[i + 0:1], rep(h[i], 2), col = border)
lines(rep(br[i + 1], 2), c(0, h[i]), col = border)
rect(br[i], 0,
br[i + 1], h[i],
col = col,
border = '#00000000')
}
}
myPDF('fdicHistograms.pdf', 6.2, 3.3,
mfrow = c(2, 2),
mar = c(2.7, 1, 1, 1),
mgp = c(1.6, 0.4, 0))
for (i in 1:4) {
histTemp(BR[[i]],
COUNTS[[i]],
xlim = c(125, 210),
axes = FALSE,
yaxs="i",
xlab = 'height (cm)')
lines(BR[[i]],
c(COUNTS[[i]], 0),
type = 's',
col = COL[1],
lwd = 2)
axis(1, cex.axis = 0.9)
}
dev.off()
