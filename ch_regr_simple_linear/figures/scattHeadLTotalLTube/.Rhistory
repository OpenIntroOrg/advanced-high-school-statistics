summary(ppColl(pts, key))#
summary(ppColl(pts, key, 2))
summary(ppColl(pts, key))#
summary(ppColl(pts, key, 2)) -> hold
hold
print(hold)
cat(hold)
as.numeric(hold)
?round
#
#===> ppColl class <===##
# points#
# pattID#
# key#
# keyMax#
# dim#
#
print.ppColl <- function(x, ...){#
	pts <- x$points#
	pts <- cbind(x$key, pts)#
	colnames(pts) <- c('key', paste('dim', 1:x$dim))#
	rownames(pts) <- 1:dim(pts)[1]#
	print(pts)#
}#
#
summary.ppColl <- function(object, ...){#
	cat('There are', dim(object$points)[1], 'points over ')#
	cat(object$dim, 'dimensions and', object$keyMax, 'patterns.\n')#
	if(max(object$key) < object$keyMax){#
		cat(object$keyMax-max(object$key), 'patterns have no points.\n\n')#
	} else {#
		cat('There are no patterns without points.\n\n')#
	}#
	#
	R <- apply(object$points, 2, fivenum)#
	colnames(R) <- paste('dim', 1:object$dim)#
	rownames(R) <- c('min', 'Q1', 'median', 'Q3', 'max')#
	round(R, signif=4)#
}
summary(ppColl(pts, key))#
summary(ppColl(pts, key, 2))
#
#===> ppColl class <===##
# points#
# pattID#
# key#
# keyMax#
# dim#
#
print.ppColl <- function(x, ...){#
	pts <- x$points#
	pts <- cbind(x$key, pts)#
	colnames(pts) <- c('key', paste('dim', 1:x$dim))#
	rownames(pts) <- 1:dim(pts)[1]#
	print(pts)#
}#
#
summary.ppColl <- function(object, ...){#
	cat('There are', dim(object$points)[1], 'points over ')#
	cat(object$dim, 'dimensions and', object$keyMax, 'patterns.\n')#
	if(max(object$key) < object$keyMax){#
		cat(object$keyMax-max(object$key), 'patterns have no points.\n\n')#
	} else {#
		cat('There are no patterns without points.\n\n')#
	}#
	#
	R <- apply(object$points, 2, fivenum)#
	colnames(R) <- paste('dim', 1:object$dim)#
	rownames(R) <- c('min', 'Q1', 'median', 'Q3', 'max')#
	signif(R, 4)#
}
summary(ppColl(pts, key))#
summary(ppColl(pts, key, 2))
#
#===> ppColl class <===##
# points#
# pattID#
# key#
# keyMax#
# dim#
#
print.ppColl <- function(x, ...){#
	pts <- x$points#
	pts <- cbind(x$key, pts)#
	colnames(pts) <- c('key', paste('dim', 1:x$dim))#
	rownames(pts) <- 1:dim(pts)[1]#
	print(pts)#
}#
#
summary.ppColl <- function(object, ...){#
	cat('There are', dim(object$points)[1], 'points over ')#
	cat(object$dim, 'dimensions and', object$keyMax, 'patterns.\n')#
	if(max(object$key) < object$keyMax){#
		cat(object$keyMax-max(object$key), 'patterns have no points.\n')#
	} else {#
		cat('There are no patterns without points.\n')#
	}#
	if(all(object$wts == objects$wts[1])){#
		cat('All patterns are weighted equally.\n\n')#
	} else {#
		cat('Patterns have different weights.\n\n')#
	}#
	#
	R <- apply(object$points, 2, fivenum)#
	colnames(R) <- paste('dim', 1:object$dim)#
	rownames(R) <- c('min', 'Q1', 'median', 'Q3', 'max')#
	signif(R, 4)#
}
#
#===> example 1 <===##
pts <- rnorm(18)#
key <- sample(1:3, 18, TRUE)#
wts <- c(1,1,1)#
object <- ppColl(pts, key, wts)#
object#
ppColl(pts, key, wts, 2)
#
#
ppColl <- function(pts, key, wts=NULL, nMissing=0){#
	tR <- list()#
	class(tR) <- 'ppColl'#
	tR$points <- NA#
	tR$pattID <- NA#
	tR$key    <- NA#
	tR$keyMax <- NA#
	tR$wts    <- NA#
	tR$dim    <- NA#
	#
	if(is.vector(pts)){#
		tR$dim    <- 1#
		tR$points <- matrix(pts, ncol=1)#
		tR$pattID <- key#
	} else {#
		tR$points <- pts#
		tR$dim    <- dim(tR$points)[2]#
		tR$pattID <- key#
	}#
	#
	uPattID <- unique(tR$pattID)#
	tR$key  <- match(tR$pattID, uPattID)#
	tR$keyMax <- max(tR$key)+nMissing#
	if(is.null(wts)[1]){#
		tR$wts <- rep(1, tR$keyMax)#
	} else {#
		if(length(wts) == tR$keyMax){#
			tR$wts <- wts#
		}#
	}#
	return(tR)#
}
#
#===> example 1 <===##
pts <- rnorm(18)#
key <- sample(1:3, 18, TRUE)#
wts <- c(1,1,1)#
object <- ppColl(pts, key, wts)#
object#
ppColl(pts, key, wts, 2)
#===> example 2 <===##
pts <- matrix(rnorm(18*3), ncol=3)#
key <- sample(1:3, 18, TRUE)#
ppColl(pts, key)#
ppColl(pts, key, 2)#
wts <- 1:3#
summary(ppColl(pts, key, wts))#
summary(ppColl(pts, key, wts, 2))
object
object[1:6]
object <- ppColl(pts, key, wts)
object[1:6]
summary(object)
	cat('There are', dim(object$points)[1], 'points over ')#
	cat(object$dim, 'dimensions and', object$keyMax, 'patterns.\n')#
	if(max(object$key) < object$keyMax){#
		cat(object$keyMax-max(object$key), 'patterns have no points.\n')#
	} else {#
		cat('There are no patterns without points.\n')#
	}#
	if(all(object$wts == objects$wts[1])){#
		cat('All patterns are weighted equally.\n\n')#
	} else {#
		cat('Patterns have different weights.\n\n')#
	}
object$wts == objects$wts[1]
object
object$wts
#
#===> ppColl class <===##
# points#
# pattID#
# key#
# keyMax#
# dim#
#
print.ppColl <- function(x, ...){#
	pts <- x$points#
	pts <- cbind(x$key, pts)#
	colnames(pts) <- c('key', paste('dim', 1:x$dim))#
	rownames(pts) <- 1:dim(pts)[1]#
	print(pts)#
}#
#
summary.ppColl <- function(object, ...){#
	cat('There are', dim(object$points)[1], 'points over ')#
	cat(object$dim, 'dimensions and', object$keyMax, 'patterns.\n')#
	if(max(object$key) < object$keyMax){#
		cat(object$keyMax-max(object$key), 'patterns have no points.\n')#
	} else {#
		cat('There are no patterns without points.\n')#
	}#
	if(all(object$wts == object$wts[1])){#
		cat('All patterns are weighted equally.\n\n')#
	} else {#
		cat('Patterns have different weights.\n\n')#
	}#
	#
	R <- apply(object$points, 2, fivenum)#
	colnames(R) <- paste('dim', 1:object$dim)#
	rownames(R) <- c('min', 'Q1', 'median', 'Q3', 'max')#
	signif(R, 4)#
}
summary(object)
summary(ppColl(pts, key, wts, 2))
object[1:6]
summary(ppColl(pts, key, 1:5, 2))
key
match(1:5, key)
match(key, 1:5)
	uPattID <- unique(tR$pattID)#
	tR$key  <- match(tR$pattID, uPattID)#
	tR$keyMax <- max(tR$key)+nMissing
1:5 %in% 1:15
all(1:5 %in% 1:15)
all(1:5 %in% 2:15)
(1:5 %in% 2:15)
#
ppColl <- function(pts, key, keyWts=NULL, wts=NULL, nMissing=0){#
	tR <- list()#
	class(tR) <- 'ppColl'#
	tR$points <- NA#
	tR$pattID <- NA#
	tR$key    <- NA#
	tR$keyMax <- NA#
	tR$wts    <- NA#
	tR$dim    <- NA#
	#
	if(is.vector(pts)){#
		tR$dim    <- 1#
		tR$points <- matrix(pts, ncol=1)#
		tR$pattID <- key#
	} else {#
		tR$points <- pts#
		tR$dim    <- dim(tR$points)[2]#
		tR$pattID <- key#
	}#
	#
	if(!is.null(wts[1])){#
		if(is.null(wtsKey[1])){#
			stop('Must provide "wtsKey" if providing "wts".\n')#
		}#
		if(length(wts) != length(wtsKey)){#
			stop('Arguments "wts" and "wtsKey" must have same length.\n')#
		}#
		if(!all(key %in% wtsKey)){#
			stop('Weights are missing for some patterns.\n')#
		}#
		tR$key <- match(tR$pattID, wtsKey)#
		tR$keyMax <- length(wtsKey)#
		tR$wts <- wts#
	} else {#
		keyWts <- unique(tR$pattID)#
		tR$key  <- match(tR$pattID, keyWts)#
		tR$keyMax <- max(tR$key)+nMissing#
		tR$wts <- rep(1, tR$keyMax)#
	}#
	return(tR)#
}
#
#===> ppColl class <===##
# points#
# pattID#
# key#
# keyMax#
# dim#
#
print.ppColl <- function(x, ...){#
	pts <- x$points#
	pts <- cbind(x$key, pts)#
	colnames(pts) <- c('key', paste('dim', 1:x$dim))#
	rownames(pts) <- 1:dim(pts)[1]#
	print(pts)#
}#
#
summary.ppColl <- function(object, ...){#
	cat('There are', dim(object$points)[1], 'points over ')#
	cat(object$dim, 'dimensions and', object$keyMax, 'patterns.\n')#
	if(max(object$key) < object$keyMax){#
		cat(object$keyMax-max(object$key), 'patterns have no points.\n')#
	} else {#
		cat('There are no patterns without points.\n')#
	}#
	if(all(object$wts == object$wts[1])){#
		cat('All patterns are weighted equally.\n\n')#
	} else {#
		cat('Patterns have different weights.\n\n')#
	}#
	#
	R <- apply(object$points, 2, fivenum)#
	colnames(R) <- paste('dim', 1:object$dim)#
	rownames(R) <- c('min', 'Q1', 'median', 'Q3', 'max')#
	signif(R, 4)#
}
#===> example 1 <===##
pts <- rnorm(18)#
key <- sample(1:3, 18, TRUE)#
wts <- c(1,1,1)#
object <- ppColl(pts, key, wts)#
object
summary(object)
object[1:6]
object[1:7]
#===> example 2 <===##
pts <- matrix(rnorm(18*3), ncol=3)#
key <- sample(1:3, 18, TRUE)#
ppColl(pts, key)#
ppColl(pts, key, 2)#
wts <- 1:3#
object <- ppColl(pts, key, wts, 3:1)#
summary(object)
#
ppColl <- function(pts, key, wts=NULL, keyWts=NULL, nMissing=0){#
	tR <- list()#
	class(tR) <- 'ppColl'#
	tR$points <- NA#
	tR$pattID <- NA#
	tR$key    <- NA#
	tR$keyMax <- NA#
	tR$wts    <- NA#
	tR$dim    <- NA#
	#
	if(is.vector(pts)){#
		tR$dim    <- 1#
		tR$points <- matrix(pts, ncol=1)#
		tR$pattID <- key#
	} else {#
		tR$points <- pts#
		tR$dim    <- dim(tR$points)[2]#
		tR$pattID <- key#
	}#
	#
	if(!is.null(wts[1])){#
		if(is.null(wtsKey[1])){#
			stop('Must provide "wtsKey" if providing "wts".\n')#
		}#
		if(length(wts) != length(wtsKey)){#
			stop('Arguments "wts" and "wtsKey" must have same length.\n')#
		}#
		if(!all(key %in% wtsKey)){#
			stop('Weights are missing for some patterns.\n')#
		}#
		tR$key <- match(tR$pattID, wtsKey)#
		tR$keyMax <- length(wtsKey)#
		tR$wts <- wts#
	} else {#
		keyWts <- unique(tR$pattID)#
		tR$key  <- match(tR$pattID, keyWts)#
		tR$keyMax <- max(tR$key)+nMissing#
		tR$wts <- rep(1, tR$keyMax)#
	}#
	return(tR)#
}
#===> example 2 <===##
pts <- matrix(rnorm(18*3), ncol=3)#
key <- sample(1:3, 18, TRUE)#
ppColl(pts, key)#
ppColl(pts, key, 2)#
wts <- 1:3#
object <- ppColl(pts, key, wts, 3:1)#
summary(object)
#
ppColl <- function(pts, key, wts=NULL, wtsKey=NULL, nMissing=0){#
	tR <- list()#
	class(tR) <- 'ppColl'#
	tR$points <- NA#
	tR$pattID <- NA#
	tR$key    <- NA#
	tR$keyMax <- NA#
	tR$wts    <- NA#
	tR$dim    <- NA#
	#
	if(is.vector(pts)){#
		tR$dim    <- 1#
		tR$points <- matrix(pts, ncol=1)#
		tR$pattID <- key#
	} else {#
		tR$points <- pts#
		tR$dim    <- dim(tR$points)[2]#
		tR$pattID <- key#
	}#
	#
	if(!is.null(wts[1])){#
		if(is.null(wtsKey[1])){#
			stop('Must provide "wtsKey" if providing "wts".\n')#
		}#
		if(length(wts) != length(wtsKey)){#
			stop('Arguments "wts" and "wtsKey" must have same length.\n')#
		}#
		if(!all(key %in% wtsKey)){#
			stop('Weights are missing for some patterns.\n')#
		}#
		tR$key <- match(tR$pattID, wtsKey)#
		tR$keyMax <- length(wtsKey)#
		tR$wts <- wts#
	} else {#
		keyWts <- unique(tR$pattID)#
		tR$key  <- match(tR$pattID, keyWts)#
		tR$keyMax <- max(tR$key)+nMissing#
		tR$wts <- rep(1, tR$keyMax)#
	}#
	return(tR)#
}
#===> example 2 <===##
pts <- matrix(rnorm(18*3), ncol=3)#
key <- sample(1:3, 18, TRUE)#
ppColl(pts, key)#
ppColl(pts, key, 2)#
wts <- 1:3#
object <- ppColl(pts, key, wts, 3:1)#
summary(object)
ppColl(pts, key, nMissing=2)
object
object[1:6]
object[1:7]
object[1:6]
pts <- matrix(rnorm(18*3), ncol=3)#
key <- sample(1:3, 18, TRUE)#
ppColl(pts, key)#
ppColl(pts, key, nMissing=2)#
wts <- 1:3#
object <- ppColl(pts, key, wts, 3:1)#
summary(object)
object[1:6]
pts <- matrix(rnorm(18*3), ncol=3)#
key <- sample(1:3, 18, TRUE)#
ppColl(pts, key)#
ppColl(pts, key, nMissing=2)#
wts <- 1:3#
object <- ppColl(pts, key, wts, 3:1)#
summary(object)
object[1:6]
pts <- matrix(rnorm(18*3), ncol=3)#
key <- sample(1:3, 18, TRUE)#
ppColl(pts, key)#
ppColl(pts, key, nMissing=2)#
wts <- 1:3#
object <- ppColl(pts, key, wts, 3:1)#
summary(object)
object[1:6]
key
wts <- 1:4#
object <- ppColl(pts, key, wts, 4:1)#
summary(object)
object[1:6]
summary(ppColl(pts, key, 1:5, 1:5))
object[1:6]
#
dyn.load("01stdist.so")#
#
stDist <- function(x, y=NULL, pm, pa=1, pd=1, eps=10^(-12), euclid=NULL, lossOrder=1, maxBranch=4){#
	tR <- list()#
	class(tR)   <- 'stdist'#
	tR$distance <- NA#
	tR$x  <- NA#
	tR$y  <- NA#
	tR$pa <- pa#
	tR$pd <- pd#
	tR$pm <- NA#
	tR$xtoy <- NA#
	tR$ytox <- NA#
	tR$dim  <- NA#
	tR$eps  <- eps#
	tR$maxBranch <- maxBranch#
	tR$euclid    <- NA#
	tR$lossOrder <- NA#
	#
	if(is.null(y[1])){#
		if(class(x) == 'stdist'){#
			x <- stdist$x#
			y <- stdist$y#
		} else {#
			stop('Arguments "y" is required unless "x" is of class "stdist".\n')#
		}#
	}#
	if(is.vector(x)){#
		tR$x <- matrix(x, ncol=1)#
	} else {#
		tR$x <- x#
	}#
	if(is.vector(y)){#
		tR$y <- matrix(y, ncol=1)#
	} else {#
		tR$y <- y#
	}#
	tR$dim <- dim(tR$x)[2]#
	nx  <- dim(tR$x)[1]#
	ny  <- dim(tR$y)[1]#
	#
	if(length(pm) == 1 & tR$dim > 1){#
		tR$pm <- rep(pm, tR$dim)#
	} else {#
		tR$pm <- pm#
	}#
	tR$xtoy <- rep(-1, nx)#
	tR$ytox <- rep(-1, ny)#
	cost <- tR$pd*nx + tR$pa*ny#
	#
	if(is.null(euclid)[1]){#
		tR$euclid <- c()#
	} else {#
		if(is.numeric(euclid)){#
			tR$euclid <- euclid#
		} else {#
			if(length(euclid) == tR$dim){#
				tR$euclid <- which(euclid)#
			} else {#
				stop('Argument "euclid" is not recognized.\n')#
			}#
		}#
	}#
	temp <- rep(0, tR$dim)#
	temp[tR$euclid] <- 1#
	tR$euclid <- temp#
	#
	if(!is.numeric(lossOrder)){#
		stop('Argument "lossOrder" must be a number greater than zero.\n')#
	}#
	if(!(lossOrder > 0)){#
		stop('Argument "lossOrder" must be a number greater than zero.\n')#
	}#
	tR$lossOrder <- lossOrder#
#
	temp <- min(c(nx, ny))#
	nB <- 2*max((nx-1:temp)*(ny-1:temp)*(1:temp))#
#
	cOut <- .C("stdist",#
		as.double(tR$x), # 1#
		as.double(tR$y), # 2#
		as.integer(nx),  # 3#
		as.integer(ny),  # 4#
		as.integer(tR$dim), # 5#
		as.double(tR$pm),   # 6#
		as.double(tR$pa),   # 7#
		as.double(tR$pd),   # 8#
		as.double(eps),     # 9#
		as.integer(tR$xtoy),      # 10#
		as.integer(tR$ytox),      # 11#
		as.integer(tR$maxBranch), # 12#
		as.double(cost),          # 13#
		as.integer(nB),           # 14#
		as.integer(tR$euclid),    # 15#
		as.double(tR$lossOrder))  # 16#
#
	cost <- pd*nx + pa*ny#
#	temp <- cOut[[10]]+1#
#	PM <- as.matrix(pm,ny,Dim,byrow=T)#
#	D <- matrix(NA, nx, ny)#
#	for(i in 1:nx){#
#		for(j in 1:ny){#
#			kk <- 0#
#			dTemp <- rep(NA, 1+tR$dim-length(tR$euclid))#
#			if(length(tR$euclid) > 0){#
#				kk <- kk+1#
#				theDiff  <- pm*abs(x[i,]-y[j,])#
#				dTemp[1] <- sqrt(sum((theDiff^2)[tR$euclid]))#
#			} else {#
#				dTemp[1] <- 0#
#			}#
#			if(length(dTemp) > 1){#
#				hold <- (pm*abs(x[i,]-y[j,]))[-tR$euclid]#
#				dTemp[2:length(dTemp)] <- hold#
#			}#
#			D[i,j] <- sum(dTemp)#
#			#
#			theDiff <- abs(x[i,] - y[j,])^tR$expon#
#			gps <- unique(tR$expon)#
#			for(i in 1:#
#			theDiff <- abs((matrix(x[i,],ny,Dim,byrow=TRUE) - y))^tR$expon#
#			apply( %*% PM, 1, sum)#
#			D[i,j] <- #
#		}#
#	}#
#	for(i in 1:nx){#
#		if(temp[i] > 0){#
#			cost <- cost - pa - pd + D[i,temp[i]]#
#		}#
#	}#
#
	tR$distance <- cOut[[13]]#
	tR$xtoy <- cOut[[10]]+1#
	tR$ytox <- cOut[[11]]+1#
#	tR$costR <- cost # to remove#
	return(tR)#
}
tR$
asdf
#
dyn.load("01stdist.so")#
#
stDist <- function(x, y=NULL, pm, pa=1, pd=1, eps=10^(-12), euclid=NULL, lossOrder=1, maxBranch=4){#
	tR <- list()#
	class(tR)   <- 'stdist'#
	tR$distance <- NA#
	tR$x  <- NA#
	tR$y  <- NA#
	tR$pa <- pa#
	tR$pd <- pd#
	tR$pm <- NA#
	tR$xtoy <- NA#
	tR$ytox <- NA#
	tR$dim  <- NA#
	tR$eps  <- eps#
	tR$maxBranch <- maxBranch#
	tR$euclid    <- NA#
	tR$lossOrder <- NA#
	#
	if(is.null(y[1])){#
		if(class(x) == 'stdist'){#
			x <- stdist$x#
			y <- stdist$y#
		} else {#
			stop('Arguments "y" is required unless "x" is of class "stdist".\n')#
		}#
	}#
	if(is.vector(x)){#
		tR$x <- matrix(x, ncol=1)#
	} else {#
		tR$x <- x#
	}#
	if(is.vector(y)){#
		tR$y <- matrix(y, ncol=1)#
	} else {#
		tR$y <- y#
	}#
	tR$dim <- dim(tR$x)[2]#
	nx  <- dim(tR$x)[1]#
	ny  <- dim(tR$y)[1]#
	#
	if(length(pm) == 1 & tR$dim > 1){#
		tR$pm <- rep(pm, tR$dim)#
	} else {#
		tR$pm <- pm#
	}#
	tR$xtoy <- rep(-1, nx)#
	tR$ytox <- rep(-1, ny)#
	cost <- tR$pd*nx + tR$pa*ny#
	#
	if(is.null(euclid)[1]){#
		tR$euclid <- c()#
	} else {#
		if(is.numeric(euclid)){#
			tR$euclid <- euclid#
		} else {#
			if(length(euclid) == tR$dim){#
				tR$euclid <- which(euclid)#
			} else {#
				stop('Argument "euclid" is not recognized.\n')#
			}#
		}#
	}#
	temp <- rep(0, tR$dim)#
	temp[tR$euclid] <- 1#
	tR$euclid <- temp#
	#
	if(!is.numeric(lossOrder)){#
		stop('Argument "lossOrder" must be a number greater than zero.\n')#
	}#
	if(!(lossOrder > 0)){#
		stop('Argument "lossOrder" must be a number greater than zero.\n')#
	}#
	tR$lossOrder <- lossOrder#
#
	temp <- min(c(nx, ny))#
	nB <- 2*max((nx-1:temp)*(ny-1:temp)*(1:temp))#
#
	cOut <- .C("stdist",#
		as.double(tR$x), # 1#
		as.double(tR$y), # 2#
		as.integer(nx),  # 3#
		as.integer(ny),  # 4#
		as.integer(tR$dim), # 5#
		as.double(tR$pm),   # 6#
		as.double(tR$pa),   # 7#
		as.double(tR$pd),   # 8#
		as.double(eps),     # 9#
		as.integer(tR$xtoy),      # 10#
		as.integer(tR$ytox),      # 11#
		as.integer(tR$maxBranch), # 12#
		as.double(cost),          # 13#
		as.integer(nB),           # 14#
		as.integer(tR$euclid),    # 15#
		as.double(tR$lossOrder))  # 16#
#
	cost <- pd*nx + pa*ny#
#	temp <- cOut[[10]]+1#
#	PM <- as.matrix(pm,ny,Dim,byrow=T)#
#	D <- matrix(NA, nx, ny)#
#	for(i in 1:nx){#
#		for(j in 1:ny){#
#			kk <- 0#
#			dTemp <- rep(NA, 1+tR$dim-length(tR$euclid))#
#			if(length(tR$euclid) > 0){#
#				kk <- kk+1#
#				theDiff  <- pm*abs(x[i,]-y[j,])#
#				dTemp[1] <- sqrt(sum((theDiff^2)[tR$euclid]))#
#			} else {#
#				dTemp[1] <- 0#
#			}#
#			if(length(dTemp) > 1){#
#				hold <- (pm*abs(x[i,]-y[j,]))[-tR$euclid]#
#				dTemp[2:length(dTemp)] <- hold#
#			}#
#			D[i,j] <- sum(dTemp)#
#			#
#			theDiff <- abs(x[i,] - y[j,])^tR$expon#
#			gps <- unique(tR$expon)#
#			for(i in 1:#
#			theDiff <- abs((matrix(x[i,],ny,Dim,byrow=TRUE) - y))^tR$expon#
#			apply( %*% PM, 1, sum)#
#			D[i,j] <- #
#		}#
#	}#
#	for(i in 1:nx){#
#		if(temp[i] > 0){#
#			cost <- cost - pa - pd + D[i,temp[i]]#
#		}#
#	}#
#
	tR$distance <- cOut[[13]]#
	tR$xtoy <- cOut[[10]]+1#
	tR$ytox <- cOut[[11]]+1#
#	tR$costR <- cost # to remove#
	return(tR)#
}
#
dyn.load("01stdist.so")#
dyn.load("02ppPrototype.so")#
#
ppPrototype <- function(ppcoll, pm, pa=1, pd=1, ppd=4, space=0.1, maxBranch=4, eps=10^-6, euclid=NULL, lossOrder=1){#
	tR <- list()#
	class(tR)    <- 'ppPrototype'#
	tR$ppColl    <- NA#
	tR$prototype <- NA#
	tR$cost  <- NA#
	tR$pa    <- pa#
	tR$pd    <- pd#
	tR$pm    <- pm#
	tR$ppd   <- ppd#
	tR$space <- space#
	tR$dim   <- NA#
	tR$dist  <- c()#
	tR$eps   <- eps#
	tR$maxBranch <- maxBranch#
	tR$euclid    <- NA#
	tR$lossOrder <- lossOrder#
	#
	if(class(ppcoll) != 'ppColl'){#
		stop('Argument "ppcoll" must be of class "ppColl".\n')#
	} else {#
		tR$ppColl <- ppcoll#
		tR$dim    <- ppcoll$dim#
	}#
	npts <- dim(ppcoll$points)[1]#
	maxObs <- sum(ppcoll$key==1)#
	for(i in 2:ppcoll$keyMax){#
		temp <- sum(ppcoll$key==i)#
		if(temp > maxObs){#
			maxObs <- temp#
		}#
	}#
	if(length(tR$pm) != tR$dim){#
		tR$pm <- rep(tR$pm, tR$dim)#
	}#
	if(length(tR$ppd) < tR$dim){#
		tR$ppd <- rep(tR$ppd, tR$dim)#
	}#
	if(length(tR$space) < tR$dim){#
		tR$space <- rep(tR$space, tR$dim)#
	}#
	PT  <- rep(-1, maxObs*tR$dim)#
	nPT <- 0#
	PTcost <- -1#
	Match <- rep(-1, npts)#
	if(is.null(euclid)[1]){#
		tR$euclid <- c()#
	} else {#
		if(is.numeric(euclid)){#
			tR$euclid <- euclid#
		} else {#
			if(length(euclid) == tR$dim){#
				tR$euclid <- which(euclid)#
			} else {#
				stop('Argument "euclid" is not recognized.\n')#
			}#
		}#
	}#
	temp <- rep(0, tR$dim)#
	temp[tR$euclid] <- 1#
	tR$euclid <- temp#
	cOut  <- .C("margPT",#
		as.double(ppcoll$points),  # 1#
		as.integer(npts),          # 2#
		as.integer(ppcoll$key),    # 3#
		as.integer(tR$dim),        # 4#
		as.integer(ppcoll$keyMax), # 5#
		as.integer(maxObs), # 6#
		as.double(tR$pm),   # 7#
		as.double(tR$pa),   # 8#
		as.double(tR$pd),   # 9#
		as.double(ppcoll$wts),    # 10#
		as.integer(tR$maxBranch), # 11#
		as.integer(tR$ppd),       # 12#
		as.double(tR$space),      # 13#
		as.double(PT),     # 14#
		as.integer(nPT),   # 15#
		as.double(PTcost), # 16#
		as.double(tR$eps), # 17#
		as.integer(Match), # 18#
		as.integer(tR$euclid),   # 19#
		as.double(tR$lossOrder)) # 20#
#
	if(cOut[[15]] > 0){#
		PT <- matrix(cOut[[14]][1:(Dim*cOut[[15]])], ncol=tR$dim, byrow=TRUE)#
	} else {#
		PT <- NULL#
	}#
	tR$prototype <- PT#
	if(length(tR$prototype) > 0){#
		for(i in 1:ppcoll$keyMax){#
			temp <- (ppcoll$key == i)#
			if(sum(temp) > 0){#
				temp <- stDist(x=tR$prototype, y=ppcoll$points[temp], pm=tR$pm, pa=tR$pa, pd=tR$pd, eps=tR$eps, euclid=tR$euclid, lossOrder=tR$lossOrder, maxBranch=tR$maxBranch)#
				tR$dist[i] <- temp$distance#
			} else {#
				tR$dist[i] <- pd*length(tR$prototype)#
			}#
		}#
	} else {#
		for(i in 1:ppcoll$keyMax){#
			temp <- (ppcoll$key == i)#
			tR$dist[i] <- pa*sum(temp)#
		}#
	}#
	tR$cost <- cOut[[16]]#
	if(tR$cost != sum(tR$dist)){#
		cat('Something is off on costs:', tR$cost,'  ', sum(tR$dist), '\n')#
	}#
	return(tR)#
}
#
load('01stDist.R')#
load('02ppColl.R')
?load
source('01stDist.R')
source('02ppColl.R')
#===> example 1 <===##
set.seed(1)#
pts <- matrix(rnorm(58*3), ncol=3)#
key <- sample(1:8, 18, TRUE)#
ppc <- ppColl(pts, key, nMissing=1)
ppc
ppc$key
#===> example 1 <===##
set.seed(1)#
pts <- matrix(rnorm(58*3), ncol=3)#
key <- sample(1:8, 58, TRUE)#
ppc <- ppColl(pts, key, nMissing=1)
ppc
source('03ppPrototype.R')
ppPrototype(ppc, 0.5)
#
dyn.load("01stdist.so")#
dyn.load("03ppPrototype.so")#
#
ppPrototype <- function(ppcoll, pm, pa=1, pd=1, ppd=4, space=0.1, maxBranch=4, eps=10^-6, euclid=NULL, lossOrder=1){#
	tR <- list()#
	class(tR)    <- 'ppPrototype'#
	tR$ppColl    <- NA#
	tR$prototype <- NA#
	tR$cost  <- NA#
	tR$pa    <- pa#
	tR$pd    <- pd#
	tR$pm    <- pm#
	tR$ppd   <- ppd#
	tR$space <- space#
	tR$dim   <- NA#
	tR$dist  <- c()#
	tR$eps   <- eps#
	tR$maxBranch <- maxBranch#
	tR$euclid    <- NA#
	tR$lossOrder <- lossOrder#
	#
	if(class(ppcoll) != 'ppColl'){#
		stop('Argument "ppcoll" must be of class "ppColl".\n')#
	} else {#
		tR$ppColl <- ppcoll#
		tR$dim    <- ppcoll$dim#
	}#
	npts <- dim(ppcoll$points)[1]#
	maxObs <- sum(ppcoll$key==1)#
	for(i in 2:ppcoll$keyMax){#
		temp <- sum(ppcoll$key==i)#
		if(temp > maxObs){#
			maxObs <- temp#
		}#
	}#
	if(length(tR$pm) != tR$dim){#
		tR$pm <- rep(tR$pm, tR$dim)#
	}#
	if(length(tR$ppd) < tR$dim){#
		tR$ppd <- rep(tR$ppd, tR$dim)#
	}#
	if(length(tR$space) < tR$dim){#
		tR$space <- rep(tR$space, tR$dim)#
	}#
	PT  <- rep(-1, maxObs*tR$dim)#
	nPT <- 0#
	PTcost <- -1#
	Match <- rep(-1, npts)#
	if(is.null(euclid)[1]){#
		tR$euclid <- c()#
	} else {#
		if(is.numeric(euclid)){#
			tR$euclid <- euclid#
		} else {#
			if(length(euclid) == tR$dim){#
				tR$euclid <- which(euclid)#
			} else {#
				stop('Argument "euclid" is not recognized.\n')#
			}#
		}#
	}#
	temp <- rep(0, tR$dim)#
	temp[tR$euclid] <- 1#
	tR$euclid <- temp#
	cOut  <- .C("margPT",#
		as.double(ppcoll$points),  # 1#
		as.integer(npts),          # 2#
		as.integer(ppcoll$key),    # 3#
		as.integer(tR$dim),        # 4#
		as.integer(ppcoll$keyMax), # 5#
		as.integer(maxObs), # 6#
		as.double(tR$pm),   # 7#
		as.double(tR$pa),   # 8#
		as.double(tR$pd),   # 9#
		as.double(ppcoll$wts),    # 10#
		as.integer(tR$maxBranch), # 11#
		as.integer(tR$ppd),       # 12#
		as.double(tR$space),      # 13#
		as.double(PT),     # 14#
		as.integer(nPT),   # 15#
		as.double(PTcost), # 16#
		as.double(tR$eps), # 17#
		as.integer(Match), # 18#
		as.integer(tR$euclid),   # 19#
		as.double(tR$lossOrder)) # 20#
#
	if(cOut[[15]] > 0){#
		PT <- matrix(cOut[[14]][1:(tR$dim*cOut[[15]])], ncol=tR$dim, byrow=TRUE)#
	} else {#
		PT <- NULL#
	}#
	tR$prototype <- PT#
	if(length(tR$prototype) > 0){#
		for(i in 1:ppcoll$keyMax){#
			temp <- (ppcoll$key == i)#
			if(sum(temp) > 0){#
				temp <- stDist(x=tR$prototype, y=ppcoll$points[temp], pm=tR$pm, pa=tR$pa, pd=tR$pd, eps=tR$eps, euclid=tR$euclid, lossOrder=tR$lossOrder, maxBranch=tR$maxBranch)#
				tR$dist[i] <- temp$distance#
			} else {#
				tR$dist[i] <- pd*length(tR$prototype)#
			}#
		}#
	} else {#
		for(i in 1:ppcoll$keyMax){#
			temp <- (ppcoll$key == i)#
			tR$dist[i] <- pa*sum(temp)#
		}#
	}#
	tR$cost <- cOut[[16]]#
	if(tR$cost != sum(tR$dist)){#
		cat('Something is off on costs:', tR$cost,'  ', sum(tR$dist), '\n')#
	}#
	return(tR)#
}
ppPrototype(ppc, 0.5)
#
dyn.load("01stdist.so")#
dyn.load("03ppPrototype.so")#
#
ppPrototype <- function(ppcoll, pm, pa=1, pd=1, ppd=4, space=0.1, maxBranch=4, eps=10^-6, euclid=NULL, lossOrder=1){#
	tR <- list()#
	class(tR)    <- 'ppPrototype'#
	tR$ppColl    <- NA#
	tR$prototype <- NA#
	tR$cost  <- NA#
	tR$pa    <- pa#
	tR$pd    <- pd#
	tR$pm    <- pm#
	tR$ppd   <- ppd#
	tR$space <- space#
	tR$dim   <- NA#
	tR$dist  <- c()#
	tR$eps   <- eps#
	tR$maxBranch <- maxBranch#
	tR$euclid    <- NA#
	tR$lossOrder <- lossOrder#
	#
	if(class(ppcoll) != 'ppColl'){#
		stop('Argument "ppcoll" must be of class "ppColl".\n')#
	} else {#
		tR$ppColl <- ppcoll#
		tR$dim    <- ppcoll$dim#
	}#
	npts <- dim(ppcoll$points)[1]#
	maxObs <- sum(ppcoll$key==1)#
	for(i in 2:ppcoll$keyMax){#
		temp <- sum(ppcoll$key==i)#
		if(temp > maxObs){#
			maxObs <- temp#
		}#
	}#
	if(length(tR$pm) != tR$dim){#
		tR$pm <- rep(tR$pm, tR$dim)#
	}#
	if(length(tR$ppd) < tR$dim){#
		tR$ppd <- rep(tR$ppd, tR$dim)#
	}#
	if(length(tR$space) < tR$dim){#
		tR$space <- rep(tR$space, tR$dim)#
	}#
	PT  <- rep(-1, maxObs*tR$dim)#
	nPT <- 0#
	PTcost <- -1#
	Match <- rep(-1, npts)#
	if(is.null(euclid)[1]){#
		tR$euclid <- c()#
	} else {#
		if(is.numeric(euclid)){#
			tR$euclid <- euclid#
		} else {#
			if(length(euclid) == tR$dim){#
				tR$euclid <- which(euclid)#
			} else {#
				stop('Argument "euclid" is not recognized.\n')#
			}#
		}#
	}#
	temp <- rep(0, tR$dim)#
	temp[tR$euclid] <- 1#
	tR$euclid <- temp#
	cOut  <- .C("margPT",#
		as.double(ppcoll$points),  # 1#
		as.integer(npts),          # 2#
		as.integer(ppcoll$key),    # 3#
		as.integer(tR$dim),        # 4#
		as.integer(ppcoll$keyMax), # 5#
		as.integer(maxObs), # 6#
		as.double(tR$pm),   # 7#
		as.double(tR$pa),   # 8#
		as.double(tR$pd),   # 9#
		as.double(ppcoll$wts),    # 10#
		as.integer(tR$maxBranch), # 11#
		as.integer(tR$ppd),       # 12#
		as.double(tR$space),      # 13#
		as.double(PT),     # 14#
		as.integer(nPT),   # 15#
		as.double(PTcost), # 16#
		as.double(tR$eps), # 17#
		as.integer(Match), # 18#
		as.integer(tR$euclid),   # 19#
		as.double(tR$lossOrder)) # 20#
#
	if(cOut[[15]] > 0){#
		PT <- matrix(cOut[[14]][1:(tR$dim*cOut[[15]])], ncol=tR$dim, byrow=TRUE)#
	} else {#
		PT <- NULL#
	}#
	tR$prototype <- PT#
	if(length(tR$prototype) > 0){#
		for(i in 1:ppcoll$keyMax){#
			temp <- (ppcoll$key == i)#
			if(sum(temp) > 0){#
				temp <- stDist(x=ppcoll$points[temp], y=tR$prototype, pm=tR$pm, pa=tR$pa, pd=tR$pd, eps=tR$eps, euclid=tR$euclid, lossOrder=tR$lossOrder, maxBranch=tR$maxBranch)#
				tR$dist[i] <- temp$distance#
			} else {#
				tR$dist[i] <- pd*length(tR$prototype)#
			}#
		}#
	} else {#
		for(i in 1:ppcoll$keyMax){#
			temp <- (ppcoll$key == i)#
			tR$dist[i] <- pa*sum(temp)#
		}#
	}#
	tR$cost <- cOut[[16]]#
	if(tR$cost != sum(tR$dist)){#
		cat('Something is off on costs:', tR$cost,'  ', sum(tR$dist), '\n')#
	}#
	return(tR)#
}
ppPrototype(ppc, 0.5)
#
dyn.load("01stdist.so")#
dyn.load("03ppPrototype.so")#
#
ppPrototype <- function(ppcoll, pm, pa=1, pd=1, ppd=4, space=0.1, maxBranch=4, eps=10^-6, euclid=NULL, lossOrder=1){#
	tR <- list()#
	class(tR)    <- 'ppPrototype'#
	tR$ppColl    <- NA#
	tR$prototype <- NA#
	tR$cost  <- NA#
	tR$pa    <- pa#
	tR$pd    <- pd#
	tR$pm    <- pm#
	tR$ppd   <- ppd#
	tR$space <- space#
	tR$dim   <- NA#
	tR$dist  <- c()#
	tR$eps   <- eps#
	tR$maxBranch <- maxBranch#
	tR$euclid    <- NA#
	tR$lossOrder <- lossOrder#
	#
	if(class(ppcoll) != 'ppColl'){#
		stop('Argument "ppcoll" must be of class "ppColl".\n')#
	} else {#
		tR$ppColl <- ppcoll#
		tR$dim    <- ppcoll$dim#
	}#
	npts <- dim(ppcoll$points)[1]#
	maxObs <- sum(ppcoll$key==1)#
	for(i in 2:ppcoll$keyMax){#
		temp <- sum(ppcoll$key==i)#
		if(temp > maxObs){#
			maxObs <- temp#
		}#
	}#
	if(length(tR$pm) != tR$dim){#
		tR$pm <- rep(tR$pm, tR$dim)#
	}#
	if(length(tR$ppd) < tR$dim){#
		tR$ppd <- rep(tR$ppd, tR$dim)#
	}#
	if(length(tR$space) < tR$dim){#
		tR$space <- rep(tR$space, tR$dim)#
	}#
	PT  <- rep(-1, maxObs*tR$dim)#
	nPT <- 0#
	PTcost <- -1#
	Match <- rep(-1, npts)#
	if(is.null(euclid)[1]){#
		tR$euclid <- c()#
	} else {#
		if(is.numeric(euclid)){#
			tR$euclid <- euclid#
		} else {#
			if(length(euclid) == tR$dim){#
				tR$euclid <- which(euclid)#
			} else {#
				stop('Argument "euclid" is not recognized.\n')#
			}#
		}#
	}#
	temp <- rep(0, tR$dim)#
	temp[tR$euclid] <- 1#
	tR$euclid <- temp#
	cOut  <- .C("margPT",#
		as.double(ppcoll$points),  # 1#
		as.integer(npts),          # 2#
		as.integer(ppcoll$key),    # 3#
		as.integer(tR$dim),        # 4#
		as.integer(ppcoll$keyMax), # 5#
		as.integer(maxObs), # 6#
		as.double(tR$pm),   # 7#
		as.double(tR$pa),   # 8#
		as.double(tR$pd),   # 9#
		as.double(ppcoll$wts),    # 10#
		as.integer(tR$maxBranch), # 11#
		as.integer(tR$ppd),       # 12#
		as.double(tR$space),      # 13#
		as.double(PT),     # 14#
		as.integer(nPT),   # 15#
		as.double(PTcost), # 16#
		as.double(tR$eps), # 17#
		as.integer(Match), # 18#
		as.integer(tR$euclid),   # 19#
		as.double(tR$lossOrder)) # 20#
#
	if(cOut[[15]] > 0){#
		PT <- matrix(cOut[[14]][1:(tR$dim*cOut[[15]])], ncol=tR$dim, byrow=TRUE)#
	} else {#
		PT <- NULL#
	}#
	tR$prototype <- PT#
	if(length(tR$prototype) > 0){#
		for(i in 1:ppcoll$keyMax){#
			temp <- (ppcoll$key == i)#
			if(sum(temp) > 0){#
				temp <- stDist(x=tR$prototype, y=ppcoll$points[temp], pm=tR$pm, pa=tR$pa, pd=tR$pd, eps=tR$eps, euclid=tR$euclid, lossOrder=tR$lossOrder, maxBranch=tR$maxBranch)#
				tR$dist[i] <- temp$distance#
			} else {#
				tR$dist[i] <- pd*length(tR$prototype)#
			}#
		}#
	} else {#
		for(i in 1:ppcoll$keyMax){#
			temp <- (ppcoll$key == i)#
			tR$dist[i] <- pa*sum(temp)#
		}#
	}#
	tR$cost <- cOut[[16]]#
	if(tR$cost != sum(tR$dist)){#
		cat('Something is off on costs:', tR$cost,'  ', sum(tR$dist), '\n')#
	}#
	return(tR)#
}
pt  <- ppPrototype(ppc, 0.5)
pt
source('01stDist.R')#
source('01methods.R')#
source('02ppColl.R')#
source('02methods.R')#
source('03ppPrototype.R')#
source('03methods.R')
print.ppPrototype <- function(x, ...){#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	signif(toPrint, 4)#
}
pt
class(pt)
pt$prototype
x
x <- pt
	toPrint <- x$prototype
toPrint
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]
toPrint
	signif(toPrint, 4)
print.ppPrototype <- function(x, ...){#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	signif(toPrint, 4)#
}
x
x
print(x)
print.ppPrototype <- function(x, ...){#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	print(signif(toPrint, 4))#
}
x
#
#===> ppPrototype class <===##
# ppColl#
# prototype#
# pa#
# pd#
# pm#
# dim#
# dist (from PT)#
# eps#
# maxBranch#
# euclid#
# lossOrder#
#
print.ppPrototype <- function(x, ...){#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	print(signif(toPrint, 4))#
}#
#
summary.ppPrototype <- function(object, ...){#
	cat('A prototype was computed based on', object$ppColl$keyMax, 'patterns.\n')#
	cat('pm:', object$pm, '\n')#
	cat('pa:', object$pa, '\n')#
	cat('pd:', object$pd, '\n')#
	cat('Total cost:', object$cost, '\n\n')#
	#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	print(signif(toPrint, 4))#
}#
#
plot.ppPrototype <- function(x, ...){#
	#
}
pt
summary(pt)
summary.ppPrototype <- function(object, ...){#
	cat('A prototype was computed based on', object$ppColl$keyMax, 'patterns.\n')#
	cat('pm:', paste(object$pm, ', '), '\n')#
	cat('pa:', object$pa, '\n')#
	cat('pd:', object$pd, '\n')#
	cat('Total cost:', object$cost, '\n\n')#
	#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	print(signif(toPrint, 4))#
}
summary(pt)
summary.ppPrototype <- function(object, ...){#
	cat('A prototype was computed based on', object$ppColl$keyMax, 'patterns.\n')#
	cat('pm:', paste(object$pm, sep=', '), '\n')#
	cat('pa:', object$pa, '\n')#
	cat('pd:', object$pd, '\n')#
	cat('Total cost:', object$cost, '\n\n')#
	#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	print(signif(toPrint, 4))#
}#
#
plot.ppPrototype <- function(x, ...){#
	#
}
summary(pt)
paste(pt$pm, sep=', ')
cat(pt$pm, sep=', ')
#
#===> ppPrototype class <===##
# ppColl#
# prototype#
# pa#
# pd#
# pm#
# dim#
# dist (from PT)#
# eps#
# maxBranch#
# euclid#
# lossOrder#
#
print.ppPrototype <- function(x, ...){#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	print(signif(toPrint, 4))#
}#
#
summary.ppPrototype <- function(object, ...){#
	cat('A prototype was computed based on', object$ppColl$keyMax, 'patterns.\n')#
	cat('pm: ')#
	cat(paste(object$pm, sep=', ')#
	cat('\n')#
	cat('pa:', object$pa, '\n')#
	cat('pd:', object$pd, '\n')#
	cat('Total cost:', object$cost, '\n\n')#
	#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	print(signif(toPrint, 4))#
}#
#
plot.ppPrototype <- function(x, ...){#
	#
}
summary(pt)
#
#===> ppPrototype class <===##
# ppColl#
# prototype#
# pa#
# pd#
# pm#
# dim#
# dist (from PT)#
# eps#
# maxBranch#
# euclid#
# lossOrder#
#
print.ppPrototype <- function(x, ...){#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	print(signif(toPrint, 4))#
}#
#
summary.ppPrototype <- function(object, ...){#
	cat('A prototype was computed based on', object$ppColl$keyMax, 'patterns.\n')#
	cat('pm: ')#
	cat(object$pm, sep=', ')#
	cat('\n')#
	cat('pa:', object$pa, '\n')#
	cat('pd:', object$pd, '\n')#
	cat('Total cost:', object$cost, '\n\n')#
	#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	print(signif(toPrint, 4))#
}#
#
plot.ppPrototype <- function(x, ...){#
	#
}
summary(pt)
#
#===> ppPrototype class <===##
# ppColl#
# prototype#
# pa#
# pd#
# pm#
# dim#
# dist (from PT)#
# eps#
# maxBranch#
# euclid#
# lossOrder#
#
print.ppPrototype <- function(x, ...){#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	print(signif(toPrint, 4))#
}#
#
summary.ppPrototype <- function(object, ...){#
	cat('A prototype was computed based on', object$ppColl$keyMax, 'patterns.\n')#
	cat('pm: ')#
	cat(object$pm, sep=', ')#
	cat('\n')#
	cat('pa:', object$pa, '\n')#
	cat('pd:', object$pd, '\n')#
	cat('Total cost:', object$cost, '\n\n')#
	#
	toPrint <- x$prototype#
	colnames(toPrint) <- paste('dim', 1:dim(toPrint)[2])#
	rownames(toPrint) <- 1:dim(toPrint)[1]#
	print(signif(toPrint, 4))#
}#
#
plot.ppPrototype <- function(x, xlim=NULL, ylim=NULL, pch=20, col='#225588', cex=1, yPos=NULL, ...){#
	if(x$dim > 2){#
		hold           <- x#
		hold$prototype <- x$prototype[,1:2]#
		hold$dim       <- 2#
		x              <- hold#
	}#
	if(x$dim == 2){#
		if(is.null(xlim)[1]){#
			xlim <- range(x$prototype[,1])#
		}#
		if(is.null(ylim)[1]){#
			ylim <- range(x$prototype[,2])#
		}#
		plot(x$prototype, col=col, pch=pch, cex=cex,#
			xlim=xlim, ylim=ylim, ...)#
	} else {#
		if(is.null(xlim)[1]){#
			xlim <- range(x$prototype[,1])#
		}#
		if(is.null(yPos[1])){#
			yPos <- rep(0, dim(x$prototype)[1])#
		} else if(length(yPos) == 1){#
			yPos <- rep(yPos, dim(x$prototype)[1])#
		}#
		if(is.null(ylim)[1]){#
			ylim <- yPos+abs(diff(yPos))*0.2*c(-1,1)#
		}#
		plot(x$prototype, yPos, col=col, pch=pch,#
			cex=cex, xlim=xlim, ylim=ylim, ...)#
	}#
}
plot(pt)
plot(pt)
#
dsg <- read.delim('dataSetGuide.txt', TRUE, sep='\t')#
#
dsg[dsg[,7] > 8,c(1,2,4,5)]
library(BSDA)
data(Cigarett)
Cigarett
plot(Cigarett)
?Cigarett
library(UsingR)
data(normtemp)
normtemp
plot(normtemp[,c(1,3)])
dsg[dsg[,7] > 8,c(1,2,4,5)]
library(faraway)
data(fat)
fat
dsg[dsg[,7] == 8,c(1,2,4,5)]
dsg[130,]
load("/Volumes/PONTOOF/openintro/openintro.RData")
cars
plot(price~weight, cars)
plot(price~mpgCity, cars)
plot(weight~mpgCity, cars)
possum[1:5,]
plot(headL ~ skullW, possum)
plot(headL ~ totalL, possum)
plot(headL ~ tailL, possum)
plot(headL ~ totalL, possum)
plot(headL ~ totalL+rnorm(54), possum)
plot(headL ~ I(totalL+rnorm(54)), possum)
plot(headL ~ I(totalL+rnorm(54)), possum)
plot(headL ~ I(totalL+rnorm(54)), possum)
plot(headL ~ I(totalL+rnorm(54)), possum)
plot(headL ~ I(totalL+rnorm(54)), possum)
plot(headL ~ I(totalL+rnorm(54)), possum)
plot(headL ~ I(totalL+rnorm(54)), possum)
plot(headL ~ I(totalL+rnorm(54, 0, 0.1)), possum)
plot(headL ~ I(totalL+rnorm(54, 0, 0.1)), possum)
plot(headL ~ I(totalL+rnorm(54, 0, 0.1)), possum)
plot(headL ~ I(totalL+rnorm(54, 0, 0.1)), possum)
plot(headL ~ I(totalL+rnorm(54, 0, 0.1)), possum)
dim(possum)
plot(headL ~ I(totalL+rnorm(104, 0, 0.1)), possum)
plot(headL ~ I(totalL+rnorm(104, 0, 0.1)), possum)
plot(headL ~ I(totalL+rnorm(104, 0, 0.1)), possum)
plot(headL ~ I(totalL+rnorm(104, 0, 0.1)), possum)
plot(headL ~ I(totalL+rnorm(104, 0, 0.1)), possum)
plot(headL ~ I(totalL+rnorm(104, 0, 0.1)), possum)
plot(headL ~ I(totalL+rnorm(104, 0, 0.03)), possum)
plot(headL ~ I(totalL+rnorm(104, 0, 0.03)), possum)
plot(headL ~ I(totalL+rnorm(104, 0, 0.03)), possum)
plot(headL ~ I(totalL+rnorm(104, 0, 0.03)), possum)
plot(headL ~ I(totalL+rnorm(104, 0, 0.03)), possum)
plot(headL ~ I(totalL+rnorm(104, 0, 0.03)), possum)
#
plot(possum$totalL, possum$headL, pch=20, col='#22558888')
#
plot(possum$totalL, possum$headL, pch=20, col='#22558888', cex=2)
#
plot(possum$headL, possum$totalL, pch=20, col='#22558888', cex=2)
#
require(Cairo)
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 5, 4)#
#
#
plot(possum$headL, possum$totalL, pch=20, col='#22558888', cex=2)#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 5, 4)#
#
par(mar=c(4,4,1,1), mpg=c(2.7,1,0))#
plot(possum$headL, possum$totalL, pch=20, col='#22558888', cex=2)#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 5, 4)#
#
par(mar=c(4,4,1,1), mpg=c(2.7,1,0))#
plot(possum$headL, possum$totalL, pch=20, col='#22558888', cex=1.7)#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 5, 4)#
#
par(mar=c(4,4,1,1), mpg=c(2.7,1,0))#
plot(possum$totalL, possum$headL, pch=20, col='#22558888', cex=1.7)#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 5, 4)#
#
par(mar=c(4,4,1,1), mpg=c(2.7,1,0))#
plot(possum$totalL, possum$headL, pch=20, col='#22558888', cex=1.7)#
#
abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 5, 4)#
#
par(mar=c(4,4,1,1), mpg=c(2.7,1,0))#
plot(possum$totalL, possum$headL, pch=20, col='#22558888', cex=1.7)#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 5, 4)#
#
par(mar=c(4,4,1,1), mpg=c(2.4,1,0))#
plot(possum$totalL, possum$headL, pch=20, col='#22558888', cex=1.7, xlab='totalL', ylab='headL')#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 5, 4)#
#
par(mar=c(4,4,1,1), mgp=c(2.4,1,0))#
plot(possum$totalL, possum$headL, pch=20, col='#22558888', cex=1.7, xlab='totalL', ylab='headL')#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 5, 4)#
#
par(mar=c(4,4,1,1), mgp=c(2.8,1,0))#
plot(possum$totalL, possum$headL, pch=20, col='#22558888', cex=1.7, xlab='totalL', ylab='headL')#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 6, 4)#
#
par(mar=c(4,4,1,1), mgp=c(2.8,1,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col='#22558888', cex=1.7, xlab='totalL', ylab='headL')#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
possum[1,]
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669955')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,1,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='totalL', ylab='headL')#
#
#
lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,1,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='totalL', ylab='headL')#
#
#
lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,1,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='totalL', ylab='headL')#
#
points(89, 94.1, col=COL[1])#
lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,1,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='totalL', ylab='headL')#
#
points(89, 94.1, col=COL[1], pch=20)#
lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 6, 4)#
#
COL <- c('#55000088','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,1,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='totalL', ylab='headL')#
#
points(89, 94.1, col=COL[1], pch=20)#
lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,1,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='totalL', ylab='headL')#
#
points(89, 94.1, col=COL[1])#
lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,1,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='totalL', ylab='headL')#
#
points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,1,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='totalL (cm)', ylab='headL (mm)')#
#
points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,1,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.7,1,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalL.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
#abline(lm(headL ~ totalL, possum))#
#
#
dev.off()
g <- abline(lm(headL ~ totalL, possum))
g
g <- lm(headL ~ totalL, possum)
g
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 6, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
plot(cars$mpgCity, cars$weight, pch=20, col=COL[2], cex=1.7)#, xlab='total length (cm)', ylab='head length (mm)')#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$mpgCity, cars$weight, pch=20, col=COL[2], cex=1.7), xlab='miles per gallon (city driving)', ylab='weight (pounds)')#
#
#
#
dev.off()
plot(cars$mpgCity, cars$weight, pch=20, col=COL[2], cex=1.7), xlab='miles per gallon (city driving)', ylab='weight (pounds)')
plot(cars$mpgCity, cars$weight, pch=20, col=COL[2], cex=1.7), xlab='miles per gallon (city driving)', ylab='weight (pounds)')
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$mpgCity, cars$weight, pch=20, col=COL[2], cex=1.7, xlab='miles per gallon (city driving)', ylab='weight (pounds)')#
#
#
#
dev.off()
g <- lm(weight ~ mpgCity*mpgCity, cars)
g
g <- lm(weight ~ I(mpgCity^2) + mpgCity, cars)
g
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$mpgCity, cars$weight, pch=20, col=COL[2], cex=1.7, xlab='miles per gallon (city driving)', ylab='weight (pounds)')#
#
g <- lm(weight ~ I(mpgCity^2) + mpgCity, cars)#
x <- c(seq(10, 50, 1), rev(seq(10, 50, 1)), 10)#
y <- 7888.9 - 306.363*x + 3.906*x^2#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$mpgCity, cars$weight, pch=20, col=COL[2], cex=1.7, xlab='miles per gallon (city driving)', ylab='weight (pounds)')#
#
g <- lm(weight ~ I(mpgCity^2) + mpgCity, cars)#
x <- c(seq(10, 50, 1), rev(seq(10, 50, 1)), 10)#
y <- 7888.9 - 306.363*x + 3.906*x^2 +#
	c(rep(-500, 41), rep(500, 41), -500)#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
g <- ksmooth(cars$mpgCity, cars$weight)
g
g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=5)
g
g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=6)
g
g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=6, range.x=c(10,50), n.points=41)
g
g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=7, range.x=c(10,50), n.points=41)
g
g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=6, range.x=c(14,48), n.points=41)
g
g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=6, range.x=c(14,48), n.points=35)
g
x <- c(g$x, rev(g$x), g$x[1])#
y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
polygon(x, y, col='#00000022', border='#00000000')
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$mpgCity, cars$weight, pch=20, col=COL[2], cex=1.7, xlab='miles per gallon (city driving)', ylab='weight (pounds)')#
#
g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=6, range.x=c(14,48), n.points=35)#
#
x <- c(g$x, rev(g$x), g$x[1])#
y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$mpgCity, cars$weight, pch=20, col=COL[2], cex=1.7, xlab='miles per gallon (city driving)', ylab='weight (pounds)')#
#
g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=12, range.x=c(14,48), n.points=35)#
#
x <- c(g$x, rev(g$x), g$x[1])#
y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$mpgCity, cars$weight, pch=20, col=COL[2], cex=1.7, xlab='miles per gallon (city driving)', ylab='weight (pounds)')#
#
#g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=12, range.x=c(14,48), n.points=35)#
#x <- c(g$x, rev(g$x), g$x[1])#
#y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
#
#
g <- lm(weight ~ I(mpgCity^2) + mpgCity, cars)#
x <- c(seq(10, 50, 1), rev(seq(10, 50, 1)), 10)#
y <- 7888.9 - 306.363*x + 3.906*x^2 +#
	c(rep(-500, 41), rep(500, 41), -500)#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$mpgCity, cars$weight, pch=20, col=COL[2], cex=1.7, xlab='miles per gallon (city driving)', ylab='weight (pounds)')#
#
#g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=12, range.x=c(14,48), n.points=35)#
#x <- c(g$x, rev(g$x), g$x[1])#
#y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
#
#
g <- lm(weight ~ I(mpgCity^2) + mpgCity, cars)#
x <- c(seq(10, 50, 1), rev(seq(10, 50, 1)), 10)#
y <- 7888.9 - 306.363*x + 3.906*x^2 +#
	c(rep(-400, 41), rep(400, 41), -400)#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$weight, cars$mpgCity, pch=20, col=COL[2], cex=1.7, ylab='miles per gallon (city driving)', xlab='weight (pounds)')#
#
#g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=12, range.x=c(14,48), n.points=35)#
#x <- c(g$x, rev(g$x), g$x[1])#
#y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
#
#
g <- lm(weight ~ I(mpgCity^2) + mpgCity, cars)#
x <- c(seq(10, 50, 1), rev(seq(10, 50, 1)), 10)#
y <- 7888.9 - 306.363*x + 3.906*x^2 +#
	c(rep(-400, 41), rep(400, 41), -400)#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$weight, cars$price, pch=20, col=COL[2], cex=1.7, ylab='miles per gallon (city driving)', xlab='weight (pounds)')#
#
#g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=12, range.x=c(14,48), n.points=35)#
#x <- c(g$x, rev(g$x), g$x[1])#
#y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
#
#
g <- lm(weight ~ I(mpgCity^2) + mpgCity, cars)#
x <- c(seq(10, 50, 1), rev(seq(10, 50, 1)), 10)#
y <- 7888.9 - 306.363*x + 3.906*x^2 +#
	c(rep(-400, 41), rep(400, 41), -400)#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
g <- lm(price ~ weight, cars)
g
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$weight, cars$price, pch=20, col=COL[2], cex=1.7, ylab='miles per gallon (city driving)', xlab='weight (pounds)')#
#
#g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=12, range.x=c(14,48), n.points=35)#
#x <- c(g$x, rev(g$x), g$x[1])#
#y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
#
#
g <- lm(price ~ weight, cars)#
x <- c(0, 5000, 5000, 0, 0)#
y <- -20.29521 + c(-5, 0.0132*5000-5, 0.0132*5000+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#x <- c(seq(10, 50, 1), rev(seq(10, 50, 1)), 10)#
#y <- 7888.9 - 306.363*x + 3.906*x^2 +#
#	c(rep(-400, 41), rep(400, 41), -400)#
#polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
g <- lm(price ~ weight + I(weight^2), cars)
g
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$weight, cars$price, pch=20, col=COL[2], cex=1.7, ylab='miles per gallon (city driving)', xlab='weight (pounds)')#
#
#g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=12, range.x=c(14,48), n.points=35)#
#x <- c(g$x, rev(g$x), g$x[1])#
#y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
#
#
g <- lm(price ~ weight + I(weight^2), cars)#
#x <- c(0, 5000, 5000, 0, 0)#
#y <- -20.29521 + c(-5, 0.0132*5000-5, 0.0132*5000+5, 5, -5)#
#polygon(x, y, col='#00000022', border='#00000000')#
x <- c(seq(1000, 5000, 100), rev(seq(1000, 5000, 100)), 1000)#
y <- -0.5569 - 0.0007536*x + 0.000002367*x^2 +#
	c(rep(-5, 41), rep(5, 41), -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$weight, cars$price, pch=20, col=COL[2], cex=1.7, ylab='miles per gallon (city driving)', xlab='weight (pounds)')#
#
#g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=12, range.x=c(14,48), n.points=35)#
#x <- c(g$x, rev(g$x), g$x[1])#
#y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
#
#
g <- lm(price ~ weight + I(weight^2), cars)#
#x <- c(0, 5000, 5000, 0, 0)#
#y <- -20.29521 + c(-5, 0.0132*5000-5, 0.0132*5000+5, 5, -5)#
#polygon(x, y, col='#00000022', border='#00000000')#
x <- c(seq(1000, 5000, 100), rev(seq(1000, 5000, 100)), 1000)#
y <- -0.5569 - 0.0007536*x + 0.000002367*x^2 +#
	c(rep(-8, 41), rep(8, 41), -8)#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$weight, cars$mpgCity, pch=20, col=COL[2], cex=1.7, ylab='miles per gallon (city driving)', xlab='weight (pounds)')#
#
#g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=12, range.x=c(14,48), n.points=35)#
#x <- c(g$x, rev(g$x), g$x[1])#
#y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
#
#
g <- lm(mpgCity ~ weight + I(weight^2), cars)#
#x <- c(0, 5000, 5000, 0, 0)#
#y <- -20.29521 + c(-5, 0.0132*5000-5, 0.0132*5000+5, 5, -5)#
#polygon(x, y, col='#00000022', border='#00000000')#
x <- c(seq(1000, 5000, 100), rev(seq(1000, 5000, 100)), 1000)#
y <- -0.5569 - 0.0007536*x + 0.000002367*x^2 +#
	c(rep(-8, 41), rep(8, 41), -8)#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
g
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 10, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$weight, cars$mpgCity, pch=20, col=COL[2], cex=1.7, ylab='miles per gallon (city driving)', xlab='weight (pounds)')#
#
#g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=12, range.x=c(14,48), n.points=35)#
#x <- c(g$x, rev(g$x), g$x[1])#
#y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
#
#
g <- lm(mpgCity ~ weight + I(weight^2), cars)#
#x <- c(0, 5000, 5000, 0, 0)#
#y <- -20.29521 + c(-5, 0.0132*5000-5, 0.0132*5000+5, 5, -5)#
#polygon(x, y, col='#00000022', border='#00000000')#
x <- c(seq(1000, 5000, 100), rev(seq(1000, 5000, 100)), 1000)#
y <- 87.11 - 0.03508*x + 0.000004432*x^2 +#
	5*c(rep(-1, 41), rep(1, 41), -1)#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
#
require(Cairo)#
CairoPDF('scattHeadLTotalLTube.pdf', 8, 4)#
#
COL <- c('#550000AA','#55669988')#
#
par(mar=c(4,4,1,1), mgp=c(2.8,0.9,0), las=1, mfrow=1:2)#
plot(possum$totalL, possum$headL, pch=20, col=COL[2], cex=1.7, xlab='total length (cm)', ylab='head length (mm)')#
#
#points(89, 94.1, col=COL[1], cex=1.7, pch=20)#
#lines(rep(89,2), c(0,94.1), lty=2, col=COL[1])#
#lines(c(0,89), rep(94.1,2), lty=2, col=COL[1])#
#
g <- lm(headL ~ totalL, possum)#
x <- c(0, 200, 200, 0, 0)#
y <- 42.71 + c(-5, 0.5729*200-5, 0.5729*200+5, 5, -5)#
polygon(x, y, col='#00000022', border='#00000000')#
#
par(las=0)#
plot(cars$weight, cars$mpgCity, pch=20, col=COL[2], cex=1.7, ylab='miles per gallon (city driving)', xlab='weight (pounds)')#
#
#g <- ksmooth(cars$mpgCity, cars$weight, bandwidth=12, range.x=c(14,48), n.points=35)#
#x <- c(g$x, rev(g$x), g$x[1])#
#y <- c(g$y-500, rev(g$y)+500, g$y[1]-500)#
#
#
g <- lm(mpgCity ~ weight + I(weight^2), cars)#
#x <- c(0, 5000, 5000, 0, 0)#
#y <- -20.29521 + c(-5, 0.0132*5000-5, 0.0132*5000+5, 5, -5)#
#polygon(x, y, col='#00000022', border='#00000000')#
x <- c(seq(1000, 5000, 100), rev(seq(1000, 5000, 100)), 1000)#
y <- 87.11 - 0.03508*x + 0.000004432*x^2 +#
	5*c(rep(-1, 41), rep(1, 41), -1)#
polygon(x, y, col='#00000022', border='#00000000')#
#
#
#
dev.off()
